\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{qed}[2021/03/11 Automagical equation checks]

% Imports
\RequirePackage{mathtools} % equation tags
\RequirePackage{fancyvrb} % outputing to files
\RequirePackage{xcolor} % custom colors
\RequirePackage{ifxetex} % enable fontawesome for xetex
\ifxetex
  \RequirePackage{fontspec}
  \defaultfontfeatures{Extension = .otf}
\fi
\RequirePackage{fontawesome} % custom symbols
\RequirePackage{keyval} % keyword arguments to macros
\RequirePackage[hidelinks]{hyperref} % url links

% Package options
\DeclareOption{elliptic}{\def\qedOptionElliptic{1}}
\ProcessOptions\relax

% File paths
\def\QEDFUNCTIONFILE{.qed/functions.qed}
\def\QEDSYMBOLFILE{.qed/symbols.qed}
\def\QEDQEDICONFILE{.qed/qed/\theqedCounter.icon}
\def\QEDQEDTEXFILE{.qed/qed/\theqedCounter.tex}
\def\QEDQEDOPTFILE{.qed/qed/\theqedCounter.json}

% Output streams
\newwrite\qedQedOptionsFile
\newwrite\qedFunctionFile
\immediate\openout\qedFunctionFile=\QEDFUNCTIONFILE%
\newwrite\qedSymbolFile
\immediate\openout\qedSymbolFile=\QEDSYMBOLFILE%
\AtEndDocument{%
  \closeout\qedFunctionFile%
  \closeout\qedSymbolFile
}%

% Define equation tags for passing / failing expressions
\definecolor{qedGreen}{rgb}{0.13333333,0.5254902,0.22745098}
\definecolor{qedRed}{rgb}{0.79607843,0.14117647,0.19215686}
\definecolor{qedYellow}{rgb}{1.0,0.88,0.30}

% Custom equation tags
\newtagform{qedEquationTag}[]{(}{)}

% QED equation counter
\newcounter{qedCounter}

% Keyword arguments to the `qed' environment
\newcommand\qedDefaultQedNumerical{fallback}
\newcommand\qedDefaultQedTimeout{0}
\newcommand\qedDefaultQedVariables{}
\newcommand\qedDefaultQedATol{1e-12}
\newcommand\qedDefaultQedRTol{1e-12}
\newcommand\qedDefaultQedSeed{0}
\newcommand\qedDefaultQedNTests{10}
\newcommand\qedDefaultQedLow{0.0}
\newcommand\qedDefaultQedHigh{1.0}
\newcommand\qedQedNumerical\qedDefaultQedNumerical
\newcommand\qedQedTimeout\qedDefaultQedTimeout
\newcommand\qedQedVariables\qedDefaultQedVariables
\newcommand\qedQedATol\qedDefaultQedATol
\newcommand\qedQedRTol\qedDefaultQedRTol
\newcommand\qedQedSeed\qedDefaultQedSeed
\newcommand\qedQedNTests\qedDefaultQedNTests
\newcommand\qedQedLow\qedDefaultQedLow
\newcommand\qedQedHigh\qedDefaultQedHigh
\define@key{qedQedKeys}{numerical}{\renewcommand\qedQedNumerical{#1}}
\define@key{qedQedKeys}{timeout}{\renewcommand\qedQedTimeout{#1}}
\define@key{qedQedKeys}{variables}{\renewcommand\qedQedVariables{#1}}
\define@key{qedQedKeys}{atol}{\renewcommand\qedQedATol{#1}}
\define@key{qedQedKeys}{rtol}{\renewcommand\qedQedRTol{#1}}
\define@key{qedQedKeys}{seed}{\renewcommand\qedQedSeed{#1}}
\define@key{qedQedKeys}{ntests}{\renewcommand\qedQedNTests{#1}}
\define@key{qedQedKeys}{low}{\renewcommand\qedQedLow{#1}}
\define@key{qedQedKeys}{high}{\renewcommand\qedQedHigh{#1}}

% Hack for the `qed` environment as per https://tex.stackexchange.com/a/9040
% See below for details
\begingroup
\catcode`\^^M\active%
\global\def\activeeol{^^M}%
\endgroup

% Define a custom `align' environment called `qed' with custom
% equation tags and `qed' functionality. The idea here is to
% capture the contents of the environment with `VerbatimOut',
% then send them to a tmp file (for later `qed` parsing)
% and display them within an actual `align' environment.
% We allow *optional* keyword arguments, which we output to
% a JSON file for the parsing. The fact that they're optional
% complicates things when we call `VerbatimOut', so we need to
% use the hacks described here: https://tex.stackexchange.com/a/9040
\newenvironment{qed}{%
    \@ifnextchar[\qed@\qed@noargs%
}{%
    \end{VerbatimOut}%
    %
    \begin{align}%
      \input{\QEDQEDTEXFILE}%
    \end{align}%
    % Reset the equation tag
    \renewtagform{qedEquationTag}[]{(}{)}%
    \usetagform{qedEquationTag}%
    % Increment the `qed' counter
    \refstepcounter{qedCounter}%
    % Reset keys to defaults
    \renewcommand\qedQedNumerical\qedDefaultQedNumerical%
    \renewcommand\qedQedTimeout\qedDefaultQTimeout%
    \renewcommand\qedQedVariables\qedDefaultQedVariables%
    \renewcommand\qedQedATol\qedDefaultQedATol%
    \renewcommand\qedQedRTol\qedDefaultQedRTol%
    \renewcommand\qedQedSeed\qedDefaultQedSeed%
    \renewcommand\qedQedNTests\qedDefaultQedNTests%
    \renewcommand\qedQedLow\qedDefaultQedLow%
    \renewcommand\qedQedHigh\qedDefaultQedHigh%
}

% Version of the `qed' environment *with* keywords provided
\def\qed@[#1]{%
    % Set provided key values
    \setkeys{qedQedKeys}{#1}%
    % Write the options to a JSON file
    \immediate\openout\qedQedOptionsFile=\QEDQEDOPTFILE%
    \immediate\write\qedQedOptionsFile{%
      {%
        ^^J% (newline char)
        "numerical": "\qedQedNumerical",%
        ^^J%
        "timeout": "\qedQedTimeout",%
        ^^J%
        "atol": "\qedQedATol",%
        ^^J%
        "rtol": "\qedQedRTol",%
        ^^J%
        "seed": "\qedQedSeed",%
        ^^J%
        "ntests": "\qedQedNTests",%
        ^^J%
        "low": "\qedQedLow",%
        ^^J%
        "high": "\qedQedHigh",%
        ^^J%
        "variables": {\qedQedVariables}%
        ^^J%
      }%
    }%
    \immediate\closeout\qedQedOptionsFile%
    %
    % Check if a pass/fail icon exists for this function
    \IfFileExists{\QEDQEDICONFILE}{%
        % Hack the equation tag appearance to include the icon
        \renewtagform{qedEquationTag}[]{\input{\QEDQEDICONFILE}\,(}{)}%
        \usetagform{qedEquationTag}%
    }{%
        % Restore the equation tag appearance
        \renewtagform{qedEquationTag}[]{(}{)}%
        \usetagform{qedEquationTag}%
    }
    % Capture the contents of the environment and
    % send them straight to a file
    \VerbatimEnvironment%
    \begin{VerbatimOut}{\QEDQEDTEXFILE}%
}

% Version of the `qed' environment *without* any keywords
\def\qed@noargs#1{%
    \edef\temp{[]\activeeol\string#1}%
    \expandafter\qed@\temp%
}

% Keyword arguments to `\qedfunction'
\newcommand\qedDefaultFunctionDescription{User-defined function}
\newcommand\qedDefaultFunctionArguments{x}
\newcommand\qedDefaultFunctionSympy{{lambda *args: 0.0}}
\newcommand\qedFunctionDescription\qedDefaultFunctionDescription
\newcommand\qedFunctionArguments\qedDefaultFunctionArguments
\newcommand\qedFunctionSympy\qedDefaultFunctionSympy
\define@key{qedFunctionKeys}{name}{\newcommand\qedFunctionName{#1}}
\define@key{qedFunctionKeys}{latex}{\newcommand\qedFunctionLatex{\unexpanded\expandafter{\ensuremath{#1}}}}
\define@key{qedFunctionKeys}{desc}{\renewcommand\qedFunctionDescription{#1}}
\define@key{qedFunctionKeys}{args}{\renewcommand\qedFunctionArguments{#1}}
\define@key{qedFunctionKeys}{sympy}{\renewcommand\qedFunctionSympy{#1}}

% Command to define a new QED function
\newcommand\qedfunction[1]{%
  % Set provided key values
  \setkeys{qedFunctionKeys}{#1}%
  % Ensure `name' and `latex' are not empty
  \ifdefined\qedFunctionName%
  \else%
    \PackageError{qed}{Missing required keyword `name' in function definition}{}%
  \fi%
  \ifdefined\qedFunctionLatex%
    % Define the LaTeX function
    \expandafter\xdef\csname\qedFunctionName\endcsname{\qedFunctionLatex}
  \fi%
  % Output to file
  \immediate\write\qedFunctionFile{{\qedFunctionName}{\qedFunctionDescription}{\qedFunctionArguments}{\qedFunctionLatex}{\qedFunctionSympy}}%
  % Reset keys to defaults
  \let\qedFunctionName\undefined%
  \let\qedFunctionLatex\undefined%
  \renewcommand\qedFunctionDescription\qedDefaultFunctionDescription%
  \renewcommand\qedFunctionArguments\qedDefaultFunctionArguments%
  \renewcommand\qedFunctionSympy\qedDefaultFunctionSympy%
}

% Keyword arguments to `\qedsymbol'
\newcommand\qedDefaultSymbolDescription{User-defined symbol}
\newcommand\qedDefaultSymbolSympy{{sympy.Integer(0)}}
\newcommand\qedSymbolDescription\qedDefaultSymbolDescription
\newcommand\qedSymbolSympy\qedDefaultSymbolSympy
\define@key{qedSymbolKeys}{name}{\newcommand\qedSymbolName{#1}}
\define@key{qedSymbolKeys}{latex}{\newcommand\qedSymbolLatex{\unexpanded\expandafter{\ensuremath{#1}}}}
\define@key{qedSymbolKeys}{desc}{\renewcommand\qedSymbolDescription{#1}}
\define@key{qedSymbolKeys}{sympy}{\renewcommand\qedSymbolSympy{#1}}

% Command to define a new QED symbol
\newcommand\qedsymbol[1]{%
  % Set provided key values
  \setkeys{qedSymbolKeys}{#1}%
  % Ensure `name' and `latex' are not empty
  \ifdefined\qedSymbolName%
  \else%
    \PackageError{qed}{Missing required keyword `name' in symbol definition}{}%
  \fi%
  \ifdefined\qedSymbolLatex%
    % Define the LaTeX symbol
    \expandafter\xdef\csname\qedSymbolName\endcsname{\qedSymbolLatex}
  \else
    \gdef\qedSymbolLatex{}
  \fi%
  % Output to file
  \immediate\write\qedSymbolFile{{\qedSymbolName}{\qedSymbolDescription}{\qedSymbolLatex}{\qedSymbolSympy}}%
  % Reset keys to defaults
  \let\qedSymbolName\undefined%
  \let\qedSymbolLatex\undefined%
  \renewcommand\qedSymbolDescription\qedDefaultSymbolDescription%
  \renewcommand\qedSymbolSympy\qedDefaultSymbolSympy%
}

% Custom math symbols
\newcommand{\dd}{\mathrm{d}}

% Standard symbols
\qedsymbol{
      name={pi},
      desc={Pi},
      sympy={sympy.pi}
}

\qedsymbol{
      name={euler},
      latex={e},
      desc={Euler's number},
      sympy={sympy.E}
}

\qedsymbol{
      name={imag},
      latex={i},
      desc={Imaginary unit},
      sympy={sympy.I}
}

\qedsymbol{
      name={infty},
      desc={Infinity},
      sympy={sympy.oo}
}

\qedsymbol{
      name={cinfty},
      latex={\tilde{\infty}},
      desc={Complex infinity},
      sympy={sympy.zoo}
}

% Elliptic integrals
\ifdefined\qedOptionElliptic%

  \qedfunction{
    name={ellipk},
    latex={K},
    desc={Complete elliptic integral of the first kind},
    args={k^2},
    sympy={lambda *args: sympy.elliptic_k(args[0], evaluate=False)}
  }

  \qedfunction{
      name={ellipe},
      latex={E},
      desc={Complete elliptic integral of the second kind},
      args={k^2},
      sympy={lambda *args: sympy.elliptic_e(args[0], evaluate=False)}
  }

  \qedfunction{
      name={ellipe},
      latex={E},
      desc={Incomplete elliptic integral of the second kind (trigonometric form)},
      args={phi | k^2},
      sympy={lambda *args: sympy.elliptic_e(args[0], args[1], evaluate=False)}
  }

  \qedfunction{
      name={ellipe},
      latex={E},
      desc={Incomplete elliptic integral of the second kind (trigonometric form)},
      args={phi , k},
      sympy={lambda *args: sympy.elliptic_e(args[0], args[1] ** 2, evaluate=False)}
  }

  \qedfunction{
      name={ellipe},
      latex={E},
      desc={Incomplete elliptic integral of the second kind (Legendre normal form)},
      args={x ; k},
      sympy={lambda *args: sympy.elliptic_e(sympy.asin(args[0]), args[1] ** 2, evaluate=False)}
  }

\fi%
