# encoding: utf-8

# *** GENERATED BY `setup.py antlr`, DO NOT EDIT BY HAND ***
#
# Generated from ../LaTeX.g4, derived from sympy and latex2sympy
#     latex2sympy is licensed under the MIT license
#     https://github.com/augustt198/latex2sympy/blob/master/LICENSE.txt
#
#     sympy is licensed under the BSD license
#     https://github.com/sympy/sympy/blob/master/LICENSE
#
# Generated with antlr4
#    antlr4 is licensed under the BSD-3-Clause License
#    https://github.com/antlr/antlr4/blob/master/LICENSE.txt
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\\")
        buf.write("\u0217\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write('\4\37\t\37\4 \t \4!\t!\4"\t"\4#\t#\4$\t$\4%\t%\4&\t')
        buf.write("&\4'\t'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\3\2\3\2")
        buf.write("\3\2\3\3\3\3\3\3\3\3\3\3\3\3\7\3d\n\3\f\3\16\3g\13\3\3")
        buf.write("\4\3\4\3\4\3\4\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\6\7\6u\n")
        buf.write("\6\f\6\16\6x\13\6\3\7\3\7\3\7\3\7\3\7\3\7\7\7\u0080\n")
        buf.write("\7\f\7\16\7\u0083\13\7\3\b\3\b\3\b\3\b\3\b\3\b\7\b\u008b")
        buf.write("\n\b\f\b\16\b\u008e\13\b\3\t\3\t\3\t\6\t\u0093\n\t\r\t")
        buf.write("\16\t\u0094\5\t\u0097\n\t\3\n\3\n\3\n\3\n\7\n\u009d\n")
        buf.write("\n\f\n\16\n\u00a0\13\n\5\n\u00a2\n\n\3\13\3\13\7\13\u00a6")
        buf.write("\n\13\f\13\16\13\u00a9\13\13\3\f\3\f\7\f\u00ad\n\f\f\f")
        buf.write("\16\f\u00b0\13\f\3\r\3\r\5\r\u00b4\n\r\3\16\3\16\3\16")
        buf.write("\3\16\3\16\3\16\5\16\u00bc\n\16\3\17\3\17\3\17\3\17\5")
        buf.write("\17\u00c2\n\17\3\17\3\17\3\20\3\20\3\20\3\20\5\20\u00ca")
        buf.write("\n\20\3\20\3\20\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\5\21\u00d8\n\21\3\21\5\21\u00db\n\21\7\21\u00dd")
        buf.write("\n\21\f\21\16\21\u00e0\13\21\3\22\3\22\3\22\3\22\3\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\5\22\u00ec\n\22\3\22\5\22\u00ef")
        buf.write("\n\22\7\22\u00f1\n\22\f\22\16\22\u00f4\13\22\3\23\3\23")
        buf.write("\3\23\3\23\3\23\3\23\3\23\3\23\5\23\u00fe\n\23\3\24\3")
        buf.write("\24\3\24\3\24\3\24\3\24\3\24\5\24\u0107\n\24\3\25\3\25")
        buf.write("\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25")
        buf.write("\3\25\3\25\3\25\5\25\u0119\n\25\3\26\3\26\3\26\3\26\3")
        buf.write("\27\3\27\3\27\3\30\3\30\3\30\5\30\u0125\n\30\3\30\3\30")
        buf.write("\3\30\3\30\3\30\5\30\u012c\n\30\3\31\3\31\3\31\3\31\3")
        buf.write("\32\3\32\3\32\3\32\3\33\3\33\3\33\3\33\3\33\3\34\7\34")
        buf.write("\u013c\n\34\f\34\16\34\u013f\13\34\3\35\3\35\3\35\3\35")
        buf.write("\3\35\3\35\3\35\3\35\3\36\3\36\3\36\3\36\3\36\3\36\3\36")
        buf.write('\3\36\3\37\3\37\3\37\3\37\3 \3 \3 \3 \3!\3!\3"\3"\3')
        buf.write('"\3#\3#\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$')
        buf.write("\3$\3$\3$\3$\3$\3$\3$\5$\u0176\n$\5$\u0178\n$\5$\u017a")
        buf.write("\n$\5$\u017c\n$\5$\u017e\n$\5$\u0180\n$\5$\u0182\n$\5")
        buf.write("$\u0184\n$\5$\u0186\n$\3$\3$\3$\3$\5$\u018c\n$\3$\5$\u018f")
        buf.write("\n$\3$\5$\u0192\n$\3$\5$\u0195\n$\5$\u0197\n$\3$\3$\3")
        buf.write("$\3$\3$\5$\u019e\n$\3$\3$\5$\u01a2\n$\3$\3$\3$\3$\3$\3")
        buf.write("$\3$\3$\3$\3$\3$\5$\u01af\n$\3$\5$\u01b2\n$\3$\3$\3$\5")
        buf.write("$\u01b7\n$\3$\3$\3$\3$\3$\5$\u01be\n$\3$\3$\3$\3$\3$\3")
        buf.write("$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\5$\u01d0\n$\3$\3$\3$\3")
        buf.write("$\3$\3$\5$\u01d8\n$\3%\3%\3%\3%\3%\5%\u01df\n%\3&\3&\3")
        buf.write("&\3&\3&\3&\3&\3&\3&\5&\u01ea\n&\3&\3&\3'\3'\3'\3'")
        buf.write("\3'\5'\u01f3\n'\3(\3(\3)\3)\3)\3)\3)\3)\5)\u01fd\n")
        buf.write(")\3*\3*\3*\3*\3*\3*\5*\u0205\n*\3+\3+\3+\3+\3+\3,\3,\3")
        buf.write(",\3,\3,\3-\7-\u0212\n-\f-\16-\u0215\13-\3-\3\u0213\b\4")
        buf.write('\n\f\16 ".\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 "')
        buf.write("$&(*,.\60\62\64\668:<>@BDFHJLNPRTVX\2\f\4\2PTWX\3\2\17")
        buf.write("\20\5\2\21\22BDLL\4\2NN\\\\\4\2\33\33\36\36\4\2\33\33")
        buf.write("\37\37\3\2FH\3\2';\3\2\33\35\3\2%&\2\u023b\2Z\3\2\2\2")
        buf.write("\4]\3\2\2\2\6h\3\2\2\2\bl\3\2\2\2\nn\3\2\2\2\fy\3\2\2")
        buf.write("\2\16\u0084\3\2\2\2\20\u0096\3\2\2\2\22\u00a1\3\2\2\2")
        buf.write("\24\u00a3\3\2\2\2\26\u00aa\3\2\2\2\30\u00b3\3\2\2\2\32")
        buf.write("\u00b5\3\2\2\2\34\u00bd\3\2\2\2\36\u00c5\3\2\2\2 \u00cd")
        buf.write('\3\2\2\2"\u00e1\3\2\2\2$\u00fd\3\2\2\2&\u0106\3\2\2\2')
        buf.write("(\u0118\3\2\2\2*\u011a\3\2\2\2,\u011e\3\2\2\2.\u012b\3")
        buf.write("\2\2\2\60\u012d\3\2\2\2\62\u0131\3\2\2\2\64\u0135\3\2")
        buf.write("\2\2\66\u013d\3\2\2\28\u0140\3\2\2\2:\u0148\3\2\2\2<\u0150")
        buf.write("\3\2\2\2>\u0154\3\2\2\2@\u0158\3\2\2\2B\u015a\3\2\2\2")
        buf.write("D\u015d\3\2\2\2F\u01d7\3\2\2\2H\u01de\3\2\2\2J\u01e0\3")
        buf.write("\2\2\2L\u01f2\3\2\2\2N\u01f4\3\2\2\2P\u01f6\3\2\2\2R\u01fe")
        buf.write("\3\2\2\2T\u0206\3\2\2\2V\u020b\3\2\2\2X\u0213\3\2\2\2")
        buf.write("Z[\5\4\3\2[\\\5X-\2\\\3\3\2\2\2]^\b\3\1\2^_\5\b\5\2_e")
        buf.write("\3\2\2\2`a\f\4\2\2ab\t\2\2\2bd\5\4\3\5c`\3\2\2\2dg\3\2")
        buf.write("\2\2ec\3\2\2\2ef\3\2\2\2f\5\3\2\2\2ge\3\2\2\2hi\5\b\5")
        buf.write("\2ij\7P\2\2jk\5\b\5\2k\7\3\2\2\2lm\5\n\6\2m\t\3\2\2\2")
        buf.write("no\b\6\1\2op\5\f\7\2pv\3\2\2\2qr\f\4\2\2rs\t\3\2\2su\5")
        buf.write("\n\6\5tq\3\2\2\2ux\3\2\2\2vt\3\2\2\2vw\3\2\2\2w\13\3\2")
        buf.write("\2\2xv\3\2\2\2yz\b\7\1\2z{\5\20\t\2{\u0081\3\2\2\2|}\f")
        buf.write("\4\2\2}~\t\4\2\2~\u0080\5\f\7\5\177|\3\2\2\2\u0080\u0083")
        buf.write("\3\2\2\2\u0081\177\3\2\2\2\u0081\u0082\3\2\2\2\u0082\r")
        buf.write("\3\2\2\2\u0083\u0081\3\2\2\2\u0084\u0085\b\b\1\2\u0085")
        buf.write("\u0086\5\22\n\2\u0086\u008c\3\2\2\2\u0087\u0088\f\4\2")
        buf.write("\2\u0088\u0089\t\4\2\2\u0089\u008b\5\16\b\5\u008a\u0087")
        buf.write("\3\2\2\2\u008b\u008e\3\2\2\2\u008c\u008a\3\2\2\2\u008c")
        buf.write("\u008d\3\2\2\2\u008d\17\3\2\2\2\u008e\u008c\3\2\2\2\u008f")
        buf.write("\u0090\t\3\2\2\u0090\u0097\5\20\t\2\u0091\u0093\5\24\13")
        buf.write("\2\u0092\u0091\3\2\2\2\u0093\u0094\3\2\2\2\u0094\u0092")
        buf.write("\3\2\2\2\u0094\u0095\3\2\2\2\u0095\u0097\3\2\2\2\u0096")
        buf.write("\u008f\3\2\2\2\u0096\u0092\3\2\2\2\u0097\21\3\2\2\2\u0098")
        buf.write("\u0099\t\3\2\2\u0099\u00a2\5\22\n\2\u009a\u009e\5\24\13")
        buf.write("\2\u009b\u009d\5\26\f\2\u009c\u009b\3\2\2\2\u009d\u00a0")
        buf.write("\3\2\2\2\u009e\u009c\3\2\2\2\u009e\u009f\3\2\2\2\u009f")
        buf.write("\u00a2\3\2\2\2\u00a0\u009e\3\2\2\2\u00a1\u0098\3\2\2\2")
        buf.write("\u00a1\u009a\3\2\2\2\u00a2\23\3\2\2\2\u00a3\u00a7\5 \21")
        buf.write("\2\u00a4\u00a6\5\30\r\2\u00a5\u00a4\3\2\2\2\u00a6\u00a9")
        buf.write("\3\2\2\2\u00a7\u00a5\3\2\2\2\u00a7\u00a8\3\2\2\2\u00a8")
        buf.write('\25\3\2\2\2\u00a9\u00a7\3\2\2\2\u00aa\u00ae\5"\22\2\u00ab')
        buf.write("\u00ad\5\30\r\2\u00ac\u00ab\3\2\2\2\u00ad\u00b0\3\2\2")
        buf.write("\2\u00ae\u00ac\3\2\2\2\u00ae\u00af\3\2\2\2\u00af\27\3")
        buf.write("\2\2\2\u00b0\u00ae\3\2\2\2\u00b1\u00b4\7[\2\2\u00b2\u00b4")
        buf.write("\5\32\16\2\u00b3\u00b1\3\2\2\2\u00b3\u00b2\3\2\2\2\u00b4")
        buf.write("\31\3\2\2\2\u00b5\u00bb\7\33\2\2\u00b6\u00bc\5\36\20\2")
        buf.write("\u00b7\u00bc\5\34\17\2\u00b8\u00b9\5\36\20\2\u00b9\u00ba")
        buf.write("\5\34\17\2\u00ba\u00bc\3\2\2\2\u00bb\u00b6\3\2\2\2\u00bb")
        buf.write("\u00b7\3\2\2\2\u00bb\u00b8\3\2\2\2\u00bc\33\3\2\2\2\u00bd")
        buf.write("\u00be\7J\2\2\u00be\u00c1\7\25\2\2\u00bf\u00c2\5\b\5\2")
        buf.write("\u00c0\u00c2\5\6\4\2\u00c1\u00bf\3\2\2\2\u00c1\u00c0\3")
        buf.write("\2\2\2\u00c2\u00c3\3\2\2\2\u00c3\u00c4\7\26\2\2\u00c4")
        buf.write("\35\3\2\2\2\u00c5\u00c6\7K\2\2\u00c6\u00c9\7\25\2\2\u00c7")
        buf.write("\u00ca\5\b\5\2\u00c8\u00ca\5\6\4\2\u00c9\u00c7\3\2\2\2")
        buf.write("\u00c9\u00c8\3\2\2\2\u00ca\u00cb\3\2\2\2\u00cb\u00cc\7")
        buf.write("\26\2\2\u00cc\37\3\2\2\2\u00cd\u00ce\b\21\1\2\u00ce\u00cf")
        buf.write("\5$\23\2\u00cf\u00de\3\2\2\2\u00d0\u00d1\f\4\2\2\u00d1")
        buf.write("\u00d7\7K\2\2\u00d2\u00d8\5.\30\2\u00d3\u00d4\7\25\2\2")
        buf.write("\u00d4\u00d5\5\b\5\2\u00d5\u00d6\7\26\2\2\u00d6\u00d8")
        buf.write("\3\2\2\2\u00d7\u00d2\3\2\2\2\u00d7\u00d3\3\2\2\2\u00d8")
        buf.write("\u00da\3\2\2\2\u00d9\u00db\5P)\2\u00da\u00d9\3\2\2\2\u00da")
        buf.write("\u00db\3\2\2\2\u00db\u00dd\3\2\2\2\u00dc\u00d0\3\2\2\2")
        buf.write("\u00dd\u00e0\3\2\2\2\u00de\u00dc\3\2\2\2\u00de\u00df\3")
        buf.write("\2\2\2\u00df!\3\2\2\2\u00e0\u00de\3\2\2\2\u00e1\u00e2")
        buf.write("\b\22\1\2\u00e2\u00e3\5&\24\2\u00e3\u00f2\3\2\2\2\u00e4")
        buf.write("\u00e5\f\4\2\2\u00e5\u00eb\7K\2\2\u00e6\u00ec\5.\30\2")
        buf.write("\u00e7\u00e8\7\25\2\2\u00e8\u00e9\5\b\5\2\u00e9\u00ea")
        buf.write("\7\26\2\2\u00ea\u00ec\3\2\2\2\u00eb\u00e6\3\2\2\2\u00eb")
        buf.write("\u00e7\3\2\2\2\u00ec\u00ee\3\2\2\2\u00ed\u00ef\5P)\2\u00ee")
        buf.write("\u00ed\3\2\2\2\u00ee\u00ef\3\2\2\2\u00ef\u00f1\3\2\2\2")
        buf.write("\u00f0\u00e4\3\2\2\2\u00f1\u00f4\3\2\2\2\u00f2\u00f0\3")
        buf.write("\2\2\2\u00f2\u00f3\3\2\2\2\u00f3#\3\2\2\2\u00f4\u00f2")
        buf.write("\3\2\2\2\u00f5\u00fe\5(\25\2\u00f6\u00fe\5*\26\2\u00f7")
        buf.write("\u00fe\5F$\2\u00f8\u00fe\5.\30\2\u00f9\u00fe\58\35\2\u00fa")
        buf.write("\u00fe\5:\36\2\u00fb\u00fe\5<\37\2\u00fc\u00fe\5> \2\u00fd")
        buf.write("\u00f5\3\2\2\2\u00fd\u00f6\3\2\2\2\u00fd\u00f7\3\2\2\2")
        buf.write("\u00fd\u00f8\3\2\2\2\u00fd\u00f9\3\2\2\2\u00fd\u00fa\3")
        buf.write("\2\2\2\u00fd\u00fb\3\2\2\2\u00fd\u00fc\3\2\2\2\u00fe%")
        buf.write("\3\2\2\2\u00ff\u0107\5(\25\2\u0100\u0107\5*\26\2\u0101")
        buf.write("\u0107\5.\30\2\u0102\u0107\58\35\2\u0103\u0107\5:\36\2")
        buf.write("\u0104\u0107\5<\37\2\u0105\u0107\5> \2\u0106\u00ff\3\2")
        buf.write("\2\2\u0106\u0100\3\2\2\2\u0106\u0101\3\2\2\2\u0106\u0102")
        buf.write("\3\2\2\2\u0106\u0103\3\2\2\2\u0106\u0104\3\2\2\2\u0106")
        buf.write("\u0105\3\2\2\2\u0107'\3\2\2\2\u0108\u0109\7\23\2\2\u0109")
        buf.write("\u010a\5\b\5\2\u010a\u010b\7\24\2\2\u010b\u0119\3\2\2")
        buf.write("\2\u010c\u010d\7\31\2\2\u010d\u010e\5\b\5\2\u010e\u010f")
        buf.write("\7\32\2\2\u010f\u0119\3\2\2\2\u0110\u0111\7\25\2\2\u0111")
        buf.write("\u0112\5\b\5\2\u0112\u0113\7\26\2\2\u0113\u0119\3\2\2")
        buf.write("\2\u0114\u0115\7\27\2\2\u0115\u0116\5\b\5\2\u0116\u0117")
        buf.write("\7\30\2\2\u0117\u0119\3\2\2\2\u0118\u0108\3\2\2\2\u0118")
        buf.write("\u010c\3\2\2\2\u0118\u0110\3\2\2\2\u0118\u0114\3\2\2\2")
        buf.write("\u0119)\3\2\2\2\u011a\u011b\7\33\2\2\u011b\u011c\5\b\5")
        buf.write("\2\u011c\u011d\7\33\2\2\u011d+\3\2\2\2\u011e\u011f\6\27")
        buf.write("\b\2\u011f\u0120\7\\\2\2\u0120-\3\2\2\2\u0121\u012c\5")
        buf.write(",\27\2\u0122\u0124\t\5\2\2\u0123\u0125\5P)\2\u0124\u0123")
        buf.write("\3\2\2\2\u0124\u0125\3\2\2\2\u0125\u012c\3\2\2\2\u0126")
        buf.write("\u012c\7O\2\2\u0127\u012c\7M\2\2\u0128\u012c\5\64\33\2")
        buf.write("\u0129\u012c\5\60\31\2\u012a\u012c\5\62\32\2\u012b\u0121")
        buf.write("\3\2\2\2\u012b\u0122\3\2\2\2\u012b\u0126\3\2\2\2\u012b")
        buf.write("\u0127\3\2\2\2\u012b\u0128\3\2\2\2\u012b\u0129\3\2\2\2")
        buf.write("\u012b\u012a\3\2\2\2\u012c/\3\2\2\2\u012d\u012e\7 \2\2")
        buf.write("\u012e\u012f\5\b\5\2\u012f\u0130\t\6\2\2\u0130\61\3\2")
        buf.write("\2\2\u0131\u0132\t\7\2\2\u0132\u0133\5\b\5\2\u0133\u0134")
        buf.write("\7!\2\2\u0134\63\3\2\2\2\u0135\u0136\7I\2\2\u0136\u0137")
        buf.write("\7\25\2\2\u0137\u0138\5\66\34\2\u0138\u0139\7\26\2\2\u0139")
        buf.write("\65\3\2\2\2\u013a\u013c\7N\2\2\u013b\u013a\3\2\2\2\u013c")
        buf.write("\u013f\3\2\2\2\u013d\u013b\3\2\2\2\u013d\u013e\3\2\2\2")
        buf.write("\u013e\67\3\2\2\2\u013f\u013d\3\2\2\2\u0140\u0141\7E\2")
        buf.write("\2\u0141\u0142\7\25\2\2\u0142\u0143\5\b\5\2\u0143\u0144")
        buf.write("\7\26\2\2\u0144\u0145\7\25\2\2\u0145\u0146\5\b\5\2\u0146")
        buf.write("\u0147\7\26\2\2\u01479\3\2\2\2\u0148\u0149\t\b\2\2\u0149")
        buf.write("\u014a\7\25\2\2\u014a\u014b\5\b\5\2\u014b\u014c\7\26\2")
        buf.write("\2\u014c\u014d\7\25\2\2\u014d\u014e\5\b\5\2\u014e\u014f")
        buf.write("\7\26\2\2\u014f;\3\2\2\2\u0150\u0151\7<\2\2\u0151\u0152")
        buf.write("\5\b\5\2\u0152\u0153\7=\2\2\u0153=\3\2\2\2\u0154\u0155")
        buf.write("\7>\2\2\u0155\u0156\5\b\5\2\u0156\u0157\7?\2\2\u0157?")
        buf.write("\3\2\2\2\u0158\u0159\t\t\2\2\u0159A\3\2\2\2\u015a\u015b")
        buf.write('\6"\t\2\u015b\u015c\7\\\2\2\u015cC\3\2\2\2\u015d\u015e')
        buf.write('\t\n\2\2\u015eE\3\2\2\2\u015f\u0160\5B"\2\u0160\u0161')
        buf.write("\7\23\2\2\u0161\u0185\5\b\5\2\u0162\u0163\5D#\2\u0163")
        buf.write("\u0183\5\b\5\2\u0164\u0165\5D#\2\u0165\u0181\5\b\5\2\u0166")
        buf.write("\u0167\5D#\2\u0167\u017f\5\b\5\2\u0168\u0169\5D#\2\u0169")
        buf.write("\u017d\5\b\5\2\u016a\u016b\5D#\2\u016b\u017b\5\b\5\2\u016c")
        buf.write("\u016d\5D#\2\u016d\u0179\5\b\5\2\u016e\u016f\5D#\2\u016f")
        buf.write("\u0177\5\b\5\2\u0170\u0171\5D#\2\u0171\u0175\5\b\5\2\u0172")
        buf.write("\u0173\5D#\2\u0173\u0174\5\b\5\2\u0174\u0176\3\2\2\2\u0175")
        buf.write("\u0172\3\2\2\2\u0175\u0176\3\2\2\2\u0176\u0178\3\2\2\2")
        buf.write("\u0177\u0170\3\2\2\2\u0177\u0178\3\2\2\2\u0178\u017a\3")
        buf.write("\2\2\2\u0179\u016e\3\2\2\2\u0179\u017a\3\2\2\2\u017a\u017c")
        buf.write("\3\2\2\2\u017b\u016c\3\2\2\2\u017b\u017c\3\2\2\2\u017c")
        buf.write("\u017e\3\2\2\2\u017d\u016a\3\2\2\2\u017d\u017e\3\2\2\2")
        buf.write("\u017e\u0180\3\2\2\2\u017f\u0168\3\2\2\2\u017f\u0180\3")
        buf.write("\2\2\2\u0180\u0182\3\2\2\2\u0181\u0166\3\2\2\2\u0181\u0182")
        buf.write("\3\2\2\2\u0182\u0184\3\2\2\2\u0183\u0164\3\2\2\2\u0183")
        buf.write("\u0184\3\2\2\2\u0184\u0186\3\2\2\2\u0185\u0162\3\2\2\2")
        buf.write("\u0185\u0186\3\2\2\2\u0186\u0187\3\2\2\2\u0187\u0188\7")
        buf.write("\24\2\2\u0188\u01d8\3\2\2\2\u0189\u0196\5@!\2\u018a\u018c")
        buf.write("\5P)\2\u018b\u018a\3\2\2\2\u018b\u018c\3\2\2\2\u018c\u018e")
        buf.write("\3\2\2\2\u018d\u018f\5R*\2\u018e\u018d\3\2\2\2\u018e\u018f")
        buf.write("\3\2\2\2\u018f\u0197\3\2\2\2\u0190\u0192\5R*\2\u0191\u0190")
        buf.write("\3\2\2\2\u0191\u0192\3\2\2\2\u0192\u0194\3\2\2\2\u0193")
        buf.write("\u0195\5P)\2\u0194\u0193\3\2\2\2\u0194\u0195\3\2\2\2\u0195")
        buf.write("\u0197\3\2\2\2\u0196\u018b\3\2\2\2\u0196\u0191\3\2\2\2")
        buf.write("\u0197\u019d\3\2\2\2\u0198\u0199\7\23\2\2\u0199\u019a")
        buf.write("\5L'\2\u019a\u019b\7\24\2\2\u019b\u019e\3\2\2\2\u019c")
        buf.write("\u019e\5N(\2\u019d\u0198\3\2\2\2\u019d\u019c\3\2\2\2\u019e")
        buf.write("\u01d8\3\2\2\2\u019f\u01a1\t\5\2\2\u01a0\u01a2\5P)\2\u01a1")
        buf.write("\u01a0\3\2\2\2\u01a1\u01a2\3\2\2\2\u01a2\u01a3\3\2\2\2")
        buf.write("\u01a3\u01a4\7\23\2\2\u01a4\u01a5\5H%\2\u01a5\u01a6\7")
        buf.write("\24\2\2\u01a6\u01d8\3\2\2\2\u01a7\u01ae\7$\2\2\u01a8\u01a9")
        buf.write("\5P)\2\u01a9\u01aa\5R*\2\u01aa\u01af\3\2\2\2\u01ab\u01ac")
        buf.write("\5R*\2\u01ac\u01ad\5P)\2\u01ad\u01af\3\2\2\2\u01ae\u01a8")
        buf.write("\3\2\2\2\u01ae\u01ab\3\2\2\2\u01ae\u01af\3\2\2\2\u01af")
        buf.write("\u01b6\3\2\2\2\u01b0\u01b2\5\n\6\2\u01b1\u01b0\3\2\2\2")
        buf.write("\u01b1\u01b2\3\2\2\2\u01b2\u01b3\3\2\2\2\u01b3\u01b7\7")
        buf.write("M\2\2\u01b4\u01b7\58\35\2\u01b5\u01b7\5\n\6\2\u01b6\u01b1")
        buf.write("\3\2\2\2\u01b6\u01b4\3\2\2\2\u01b6\u01b5\3\2\2\2\u01b7")
        buf.write("\u01d8\3\2\2\2\u01b8\u01bd\7@\2\2\u01b9\u01ba\7\31\2\2")
        buf.write("\u01ba\u01bb\5\b\5\2\u01bb\u01bc\7\32\2\2\u01bc\u01be")
        buf.write("\3\2\2\2\u01bd\u01b9\3\2\2\2\u01bd\u01be\3\2\2\2\u01be")
        buf.write("\u01bf\3\2\2\2\u01bf\u01c0\7\25\2\2\u01c0\u01c1\5\b\5")
        buf.write("\2\u01c1\u01c2\7\26\2\2\u01c2\u01d8\3\2\2\2\u01c3\u01c4")
        buf.write("\7A\2\2\u01c4\u01c5\7\25\2\2\u01c5\u01c6\5\b\5\2\u01c6")
        buf.write("\u01c7\7\26\2\2\u01c7\u01d8\3\2\2\2\u01c8\u01cf\t\13\2")
        buf.write("\2\u01c9\u01ca\5T+\2\u01ca\u01cb\5R*\2\u01cb\u01d0\3\2")
        buf.write("\2\2\u01cc\u01cd\5R*\2\u01cd\u01ce\5T+\2\u01ce\u01d0\3")
        buf.write("\2\2\2\u01cf\u01c9\3\2\2\2\u01cf\u01cc\3\2\2\2\u01d0\u01d1")
        buf.write("\3\2\2\2\u01d1\u01d2\5\f\7\2\u01d2\u01d8\3\2\2\2\u01d3")
        buf.write('\u01d4\7"\2\2\u01d4\u01d5\5J&\2\u01d5\u01d6\5\f\7\2\u01d6')
        buf.write("\u01d8\3\2\2\2\u01d7\u015f\3\2\2\2\u01d7\u0189\3\2\2\2")
        buf.write("\u01d7\u019f\3\2\2\2\u01d7\u01a7\3\2\2\2\u01d7\u01b8\3")
        buf.write("\2\2\2\u01d7\u01c3\3\2\2\2\u01d7\u01c8\3\2\2\2\u01d7\u01d3")
        buf.write("\3\2\2\2\u01d8G\3\2\2\2\u01d9\u01da\5\b\5\2\u01da\u01db")
        buf.write("\7\34\2\2\u01db\u01dc\5H%\2\u01dc\u01df\3\2\2\2\u01dd")
        buf.write("\u01df\5\b\5\2\u01de\u01d9\3\2\2\2\u01de\u01dd\3\2\2\2")
        buf.write("\u01dfI\3\2\2\2\u01e0\u01e1\7J\2\2\u01e1\u01e2\7\25\2")
        buf.write("\2\u01e2\u01e3\t\5\2\2\u01e3\u01e4\7#\2\2\u01e4\u01e9")
        buf.write("\5\b\5\2\u01e5\u01e6\7K\2\2\u01e6\u01e7\7\25\2\2\u01e7")
        buf.write("\u01e8\t\3\2\2\u01e8\u01ea\7\26\2\2\u01e9\u01e5\3\2\2")
        buf.write("\2\u01e9\u01ea\3\2\2\2\u01ea\u01eb\3\2\2\2\u01eb\u01ec")
        buf.write("\7\26\2\2\u01ecK\3\2\2\2\u01ed\u01f3\5\b\5\2\u01ee\u01ef")
        buf.write("\5\b\5\2\u01ef\u01f0\7\34\2\2\u01f0\u01f1\5L'\2\u01f1")
        buf.write("\u01f3\3\2\2\2\u01f2\u01ed\3\2\2\2\u01f2\u01ee\3\2\2\2")
        buf.write("\u01f3M\3\2\2\2\u01f4\u01f5\5\16\b\2\u01f5O\3\2\2\2\u01f6")
        buf.write("\u01fc\7J\2\2\u01f7\u01fd\5.\30\2\u01f8\u01f9\7\25\2\2")
        buf.write("\u01f9\u01fa\5\b\5\2\u01fa\u01fb\7\26\2\2\u01fb\u01fd")
        buf.write("\3\2\2\2\u01fc\u01f7\3\2\2\2\u01fc\u01f8\3\2\2\2\u01fd")
        buf.write("Q\3\2\2\2\u01fe\u0204\7K\2\2\u01ff\u0205\5.\30\2\u0200")
        buf.write("\u0201\7\25\2\2\u0201\u0202\5\b\5\2\u0202\u0203\7\26\2")
        buf.write("\2\u0203\u0205\3\2\2\2\u0204\u01ff\3\2\2\2\u0204\u0200")
        buf.write("\3\2\2\2\u0205S\3\2\2\2\u0206\u0207\7J\2\2\u0207\u0208")
        buf.write("\7\25\2\2\u0208\u0209\5\6\4\2\u0209\u020a\7\26\2\2\u020a")
        buf.write("U\3\2\2\2\u020b\u020c\7J\2\2\u020c\u020d\7\25\2\2\u020d")
        buf.write("\u020e\5\6\4\2\u020e\u020f\7\26\2\2\u020fW\3\2\2\2\u0210")
        buf.write("\u0212\13\2\2\2\u0211\u0210\3\2\2\2\u0212\u0215\3\2\2")
        buf.write("\2\u0213\u0214\3\2\2\2\u0213\u0211\3\2\2\2\u0214Y\3\2")
        buf.write("\2\2\u0215\u0213\3\2\2\28ev\u0081\u008c\u0094\u0096\u009e")
        buf.write("\u00a1\u00a7\u00ae\u00b3\u00bb\u00c1\u00c9\u00d7\u00da")
        buf.write("\u00de\u00eb\u00ee\u00f2\u00fd\u0106\u0118\u0124\u012b")
        buf.write("\u013d\u0175\u0177\u0179\u017b\u017d\u017f\u0181\u0183")
        buf.write("\u0185\u018b\u018e\u0191\u0194\u0196\u019d\u01a1\u01ae")
        buf.write("\u01b1\u01b6\u01bd\u01cf\u01d7\u01de\u01e9\u01f2\u01fc")
        buf.write("\u0204\u0213")
        return buf.getvalue()


class LaTeXParser(Parser):

    grammarFileName = "LaTeX.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    sharedContextCache = PredictionContextCache()

    literalNames = [
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "'\\quad'",
        "'\\qquad'",
        "<INVALID>",
        "'\\negmedspace'",
        "'\\negthickspace'",
        "'\\left'",
        "'\\right'",
        "<INVALID>",
        "'+'",
        "'-'",
        "'*'",
        "'/'",
        "'('",
        "')'",
        "'{'",
        "'}'",
        "'\\{'",
        "'\\}'",
        "'['",
        "']'",
        "'|'",
        "','",
        "';'",
        "'\\right|'",
        "'\\left|'",
        "'\\langle'",
        "'\\rangle'",
        "'\\lim'",
        "<INVALID>",
        "'\\int'",
        "'\\sum'",
        "'\\prod'",
        "'\\exp'",
        "'\\log'",
        "'\\ln'",
        "'\\sin'",
        "'\\cos'",
        "'\\tan'",
        "'\\csc'",
        "'\\sec'",
        "'\\cot'",
        "'\\arcsin'",
        "'\\arccos'",
        "'\\arctan'",
        "'\\arccsc'",
        "'\\arcsec'",
        "'\\arccot'",
        "'\\sinh'",
        "'\\cosh'",
        "'\\tanh'",
        "'\\arsinh'",
        "'\\arcosh'",
        "'\\artanh'",
        "'\\lfloor'",
        "'\\rfloor'",
        "'\\lceil'",
        "'\\rceil'",
        "'\\sqrt'",
        "'\\overline'",
        "'\\times'",
        "'\\cdot'",
        "'\\div'",
        "'\\frac'",
        "'\\binom'",
        "'\\dbinom'",
        "'\\tbinom'",
        "'\\mathit'",
        "'_'",
        "'^'",
        "':'",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "'\\neq'",
        "'<'",
        "<INVALID>",
        "'\\leqq'",
        "'\\leqslant'",
        "'>'",
        "<INVALID>",
        "'\\geqq'",
        "'\\geqslant'",
        "'!'",
    ]

    symbolicNames = [
        "<INVALID>",
        "WS",
        "THINSPACE",
        "MEDSPACE",
        "THICKSPACE",
        "QUAD",
        "QQUAD",
        "NEGTHINSPACE",
        "NEGMEDSPACE",
        "NEGTHICKSPACE",
        "CMD_LEFT",
        "CMD_RIGHT",
        "IGNORE",
        "ADD",
        "SUB",
        "MUL",
        "DIV",
        "L_PAREN",
        "R_PAREN",
        "L_BRACE",
        "R_BRACE",
        "L_BRACE_LITERAL",
        "R_BRACE_LITERAL",
        "L_BRACKET",
        "R_BRACKET",
        "BAR",
        "COMMA",
        "SEMICOLON",
        "R_BAR",
        "L_BAR",
        "L_ANGLE",
        "R_ANGLE",
        "FUNC_LIM",
        "LIM_APPROACH_SYM",
        "FUNC_INT",
        "FUNC_SUM",
        "FUNC_PROD",
        "FUNC_EXP",
        "FUNC_LOG",
        "FUNC_LN",
        "FUNC_SIN",
        "FUNC_COS",
        "FUNC_TAN",
        "FUNC_CSC",
        "FUNC_SEC",
        "FUNC_COT",
        "FUNC_ARCSIN",
        "FUNC_ARCCOS",
        "FUNC_ARCTAN",
        "FUNC_ARCCSC",
        "FUNC_ARCSEC",
        "FUNC_ARCCOT",
        "FUNC_SINH",
        "FUNC_COSH",
        "FUNC_TANH",
        "FUNC_ARSINH",
        "FUNC_ARCOSH",
        "FUNC_ARTANH",
        "L_FLOOR",
        "R_FLOOR",
        "L_CEIL",
        "R_CEIL",
        "FUNC_SQRT",
        "FUNC_OVERLINE",
        "CMD_TIMES",
        "CMD_CDOT",
        "CMD_DIV",
        "CMD_FRAC",
        "CMD_BINOM",
        "CMD_DBINOM",
        "CMD_TBINOM",
        "CMD_MATHIT",
        "UNDERSCORE",
        "CARET",
        "COLON",
        "DIFFERENTIAL",
        "LETTER",
        "NUMBER",
        "EQUAL",
        "EQUIV",
        "NEQ",
        "LT",
        "LTE",
        "LTE_Q",
        "LTE_S",
        "GT",
        "GTE",
        "GTE_Q",
        "GTE_S",
        "BANG",
        "SYMBOL",
    ]

    RULE_math = 0
    RULE_relation = 1
    RULE_equality = 2
    RULE_expr = 3
    RULE_additive = 4
    RULE_mp = 5
    RULE_mp_nofunc = 6
    RULE_unary = 7
    RULE_unary_nofunc = 8
    RULE_postfix = 9
    RULE_postfix_nofunc = 10
    RULE_postfix_op = 11
    RULE_eval_at = 12
    RULE_eval_at_sub = 13
    RULE_eval_at_sup = 14
    RULE_exp = 15
    RULE_exp_nofunc = 16
    RULE_comp = 17
    RULE_comp_nofunc = 18
    RULE_group = 19
    RULE_abs_group = 20
    RULE_symbol_custom = 21
    RULE_atom = 22
    RULE_bra = 23
    RULE_ket = 24
    RULE_mathit = 25
    RULE_mathit_text = 26
    RULE_frac = 27
    RULE_binom = 28
    RULE_floor = 29
    RULE_ceil = 30
    RULE_func_normal = 31
    RULE_func_custom = 32
    RULE_separator = 33
    RULE_func = 34
    RULE_args = 35
    RULE_limit_sub = 36
    RULE_func_arg = 37
    RULE_func_arg_noparens = 38
    RULE_subexpr = 39
    RULE_supexpr = 40
    RULE_subeq = 41
    RULE_supeq = 42
    RULE_unknown = 43

    ruleNames = [
        "math",
        "relation",
        "equality",
        "expr",
        "additive",
        "mp",
        "mp_nofunc",
        "unary",
        "unary_nofunc",
        "postfix",
        "postfix_nofunc",
        "postfix_op",
        "eval_at",
        "eval_at_sub",
        "eval_at_sup",
        "exp",
        "exp_nofunc",
        "comp",
        "comp_nofunc",
        "group",
        "abs_group",
        "symbol_custom",
        "atom",
        "bra",
        "ket",
        "mathit",
        "mathit_text",
        "frac",
        "binom",
        "floor",
        "ceil",
        "func_normal",
        "func_custom",
        "separator",
        "func",
        "args",
        "limit_sub",
        "func_arg",
        "func_arg_noparens",
        "subexpr",
        "supexpr",
        "subeq",
        "supeq",
        "unknown",
    ]

    EOF = Token.EOF
    WS = 1
    THINSPACE = 2
    MEDSPACE = 3
    THICKSPACE = 4
    QUAD = 5
    QQUAD = 6
    NEGTHINSPACE = 7
    NEGMEDSPACE = 8
    NEGTHICKSPACE = 9
    CMD_LEFT = 10
    CMD_RIGHT = 11
    IGNORE = 12
    ADD = 13
    SUB = 14
    MUL = 15
    DIV = 16
    L_PAREN = 17
    R_PAREN = 18
    L_BRACE = 19
    R_BRACE = 20
    L_BRACE_LITERAL = 21
    R_BRACE_LITERAL = 22
    L_BRACKET = 23
    R_BRACKET = 24
    BAR = 25
    COMMA = 26
    SEMICOLON = 27
    R_BAR = 28
    L_BAR = 29
    L_ANGLE = 30
    R_ANGLE = 31
    FUNC_LIM = 32
    LIM_APPROACH_SYM = 33
    FUNC_INT = 34
    FUNC_SUM = 35
    FUNC_PROD = 36
    FUNC_EXP = 37
    FUNC_LOG = 38
    FUNC_LN = 39
    FUNC_SIN = 40
    FUNC_COS = 41
    FUNC_TAN = 42
    FUNC_CSC = 43
    FUNC_SEC = 44
    FUNC_COT = 45
    FUNC_ARCSIN = 46
    FUNC_ARCCOS = 47
    FUNC_ARCTAN = 48
    FUNC_ARCCSC = 49
    FUNC_ARCSEC = 50
    FUNC_ARCCOT = 51
    FUNC_SINH = 52
    FUNC_COSH = 53
    FUNC_TANH = 54
    FUNC_ARSINH = 55
    FUNC_ARCOSH = 56
    FUNC_ARTANH = 57
    L_FLOOR = 58
    R_FLOOR = 59
    L_CEIL = 60
    R_CEIL = 61
    FUNC_SQRT = 62
    FUNC_OVERLINE = 63
    CMD_TIMES = 64
    CMD_CDOT = 65
    CMD_DIV = 66
    CMD_FRAC = 67
    CMD_BINOM = 68
    CMD_DBINOM = 69
    CMD_TBINOM = 70
    CMD_MATHIT = 71
    UNDERSCORE = 72
    CARET = 73
    COLON = 74
    DIFFERENTIAL = 75
    LETTER = 76
    NUMBER = 77
    EQUAL = 78
    EQUIV = 79
    NEQ = 80
    LT = 81
    LTE = 82
    LTE_Q = 83
    LTE_S = 84
    GT = 85
    GTE = 86
    GTE_Q = 87
    GTE_S = 88
    BANG = 89
    SYMBOL = 90

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(
            self, self.atn, self.decisionsToDFA, self.sharedContextCache
        )
        self._predicates = None

    class MathContext(ParserRuleContext):
        def __init__(
            self,
            parser,
            parent: ParserRuleContext = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relation(self):
            return self.getTypedRuleContext(LaTeXParser.RelationContext, 0)

        def unknown(self):
            return self.getTypedRuleContext(LaTeXParser.UnknownContext, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_math

    def math(self):

        localctx = LaTeXParser.MathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_math)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 88
            self.relation(0)
            self.state = 89
            self.unknown()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RelationContext(ParserRuleContext):
        def __init__(
            self,
            parser,
            parent: ParserRuleContext = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext, 0)

        def relation(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.RelationContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.RelationContext, i)

        def EQUAL(self):
            return self.getToken(LaTeXParser.EQUAL, 0)

        def EQUIV(self):
            return self.getToken(LaTeXParser.EQUIV, 0)

        def LT(self):
            return self.getToken(LaTeXParser.LT, 0)

        def LTE(self):
            return self.getToken(LaTeXParser.LTE, 0)

        def GT(self):
            return self.getToken(LaTeXParser.GT, 0)

        def GTE(self):
            return self.getToken(LaTeXParser.GTE, 0)

        def NEQ(self):
            return self.getToken(LaTeXParser.NEQ, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_relation

    def relation(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LaTeXParser.RelationContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 2
        self.enterRecursionRule(localctx, 2, self.RULE_relation, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 92
            self.expr()
            self._ctx.stop = self._input.LT(-1)
            self.state = 99
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 0, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LaTeXParser.RelationContext(
                        self, _parentctx, _parentState
                    )
                    self.pushNewRecursionContext(
                        localctx, _startState, self.RULE_relation
                    )
                    self.state = 94
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import (
                            FailedPredicateException,
                        )

                        raise FailedPredicateException(
                            self, "self.precpred(self._ctx, 2)"
                        )
                    self.state = 95
                    _la = self._input.LA(1)
                    if not (
                        (
                            (((_la - 78)) & ~0x3F) == 0
                            and (
                                (1 << (_la - 78))
                                & (
                                    (1 << (LaTeXParser.EQUAL - 78))
                                    | (1 << (LaTeXParser.EQUIV - 78))
                                    | (1 << (LaTeXParser.NEQ - 78))
                                    | (1 << (LaTeXParser.LT - 78))
                                    | (1 << (LaTeXParser.LTE - 78))
                                    | (1 << (LaTeXParser.GT - 78))
                                    | (1 << (LaTeXParser.GTE - 78))
                                )
                            )
                            != 0
                        )
                    ):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 96
                    self.relation(3)
                self.state = 101
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 0, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class EqualityContext(ParserRuleContext):
        def __init__(
            self,
            parser,
            parent: ParserRuleContext = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.ExprContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.ExprContext, i)

        def EQUAL(self):
            return self.getToken(LaTeXParser.EQUAL, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_equality

    def equality(self):

        localctx = LaTeXParser.EqualityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_equality)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 102
            self.expr()
            self.state = 103
            self.match(LaTeXParser.EQUAL)
            self.state = 104
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprContext(ParserRuleContext):
        def __init__(
            self,
            parser,
            parent: ParserRuleContext = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additive(self):
            return self.getTypedRuleContext(LaTeXParser.AdditiveContext, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_expr

    def expr(self):

        localctx = LaTeXParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 106
            self.additive(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AdditiveContext(ParserRuleContext):
        def __init__(
            self,
            parser,
            parent: ParserRuleContext = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mp(self):
            return self.getTypedRuleContext(LaTeXParser.MpContext, 0)

        def additive(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.AdditiveContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.AdditiveContext, i)

        def ADD(self):
            return self.getToken(LaTeXParser.ADD, 0)

        def SUB(self):
            return self.getToken(LaTeXParser.SUB, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_additive

    def additive(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LaTeXParser.AdditiveContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 8
        self.enterRecursionRule(localctx, 8, self.RULE_additive, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 109
            self.mp(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 116
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 1, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LaTeXParser.AdditiveContext(
                        self, _parentctx, _parentState
                    )
                    self.pushNewRecursionContext(
                        localctx, _startState, self.RULE_additive
                    )
                    self.state = 111
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import (
                            FailedPredicateException,
                        )

                        raise FailedPredicateException(
                            self, "self.precpred(self._ctx, 2)"
                        )
                    self.state = 112
                    _la = self._input.LA(1)
                    if not (_la == LaTeXParser.ADD or _la == LaTeXParser.SUB):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 113
                    self.additive(3)
                self.state = 118
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 1, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class MpContext(ParserRuleContext):
        def __init__(
            self,
            parser,
            parent: ParserRuleContext = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary(self):
            return self.getTypedRuleContext(LaTeXParser.UnaryContext, 0)

        def mp(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.MpContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.MpContext, i)

        def MUL(self):
            return self.getToken(LaTeXParser.MUL, 0)

        def CMD_TIMES(self):
            return self.getToken(LaTeXParser.CMD_TIMES, 0)

        def CMD_CDOT(self):
            return self.getToken(LaTeXParser.CMD_CDOT, 0)

        def DIV(self):
            return self.getToken(LaTeXParser.DIV, 0)

        def CMD_DIV(self):
            return self.getToken(LaTeXParser.CMD_DIV, 0)

        def COLON(self):
            return self.getToken(LaTeXParser.COLON, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_mp

    def mp(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LaTeXParser.MpContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 10
        self.enterRecursionRule(localctx, 10, self.RULE_mp, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 120
            self.unary()
            self._ctx.stop = self._input.LT(-1)
            self.state = 127
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 2, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LaTeXParser.MpContext(
                        self, _parentctx, _parentState
                    )
                    self.pushNewRecursionContext(
                        localctx, _startState, self.RULE_mp
                    )
                    self.state = 122
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import (
                            FailedPredicateException,
                        )

                        raise FailedPredicateException(
                            self, "self.precpred(self._ctx, 2)"
                        )
                    self.state = 123
                    _la = self._input.LA(1)
                    if not (
                        (
                            (((_la - 15)) & ~0x3F) == 0
                            and (
                                (1 << (_la - 15))
                                & (
                                    (1 << (LaTeXParser.MUL - 15))
                                    | (1 << (LaTeXParser.DIV - 15))
                                    | (1 << (LaTeXParser.CMD_TIMES - 15))
                                    | (1 << (LaTeXParser.CMD_CDOT - 15))
                                    | (1 << (LaTeXParser.CMD_DIV - 15))
                                    | (1 << (LaTeXParser.COLON - 15))
                                )
                            )
                            != 0
                        )
                    ):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 124
                    self.mp(3)
                self.state = 129
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 2, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Mp_nofuncContext(ParserRuleContext):
        def __init__(
            self,
            parser,
            parent: ParserRuleContext = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_nofunc(self):
            return self.getTypedRuleContext(LaTeXParser.Unary_nofuncContext, 0)

        def mp_nofunc(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.Mp_nofuncContext)
            else:
                return self.getTypedRuleContext(
                    LaTeXParser.Mp_nofuncContext, i
                )

        def MUL(self):
            return self.getToken(LaTeXParser.MUL, 0)

        def CMD_TIMES(self):
            return self.getToken(LaTeXParser.CMD_TIMES, 0)

        def CMD_CDOT(self):
            return self.getToken(LaTeXParser.CMD_CDOT, 0)

        def DIV(self):
            return self.getToken(LaTeXParser.DIV, 0)

        def CMD_DIV(self):
            return self.getToken(LaTeXParser.CMD_DIV, 0)

        def COLON(self):
            return self.getToken(LaTeXParser.COLON, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_mp_nofunc

    def mp_nofunc(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LaTeXParser.Mp_nofuncContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 12
        self.enterRecursionRule(localctx, 12, self.RULE_mp_nofunc, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 131
            self.unary_nofunc()
            self._ctx.stop = self._input.LT(-1)
            self.state = 138
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 3, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LaTeXParser.Mp_nofuncContext(
                        self, _parentctx, _parentState
                    )
                    self.pushNewRecursionContext(
                        localctx, _startState, self.RULE_mp_nofunc
                    )
                    self.state = 133
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import (
                            FailedPredicateException,
                        )

                        raise FailedPredicateException(
                            self, "self.precpred(self._ctx, 2)"
                        )
                    self.state = 134
                    _la = self._input.LA(1)
                    if not (
                        (
                            (((_la - 15)) & ~0x3F) == 0
                            and (
                                (1 << (_la - 15))
                                & (
                                    (1 << (LaTeXParser.MUL - 15))
                                    | (1 << (LaTeXParser.DIV - 15))
                                    | (1 << (LaTeXParser.CMD_TIMES - 15))
                                    | (1 << (LaTeXParser.CMD_CDOT - 15))
                                    | (1 << (LaTeXParser.CMD_DIV - 15))
                                    | (1 << (LaTeXParser.COLON - 15))
                                )
                            )
                            != 0
                        )
                    ):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 135
                    self.mp_nofunc(3)
                self.state = 140
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 3, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class UnaryContext(ParserRuleContext):
        def __init__(
            self,
            parser,
            parent: ParserRuleContext = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary(self):
            return self.getTypedRuleContext(LaTeXParser.UnaryContext, 0)

        def ADD(self):
            return self.getToken(LaTeXParser.ADD, 0)

        def SUB(self):
            return self.getToken(LaTeXParser.SUB, 0)

        def postfix(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.PostfixContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.PostfixContext, i)

        def getRuleIndex(self):
            return LaTeXParser.RULE_unary

    def unary(self):

        localctx = LaTeXParser.UnaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_unary)
        self._la = 0  # Token type
        try:
            self.state = 148
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 5, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 141
                _la = self._input.LA(1)
                if not (_la == LaTeXParser.ADD or _la == LaTeXParser.SUB):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 142
                self.unary()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 144
                self._errHandler.sync(self)
                _alt = 1
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 143
                        self.postfix()

                    else:
                        raise NoViableAltException(self)
                    self.state = 146
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(
                        self._input, 4, self._ctx
                    )

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unary_nofuncContext(ParserRuleContext):
        def __init__(
            self,
            parser,
            parent: ParserRuleContext = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_nofunc(self):
            return self.getTypedRuleContext(LaTeXParser.Unary_nofuncContext, 0)

        def ADD(self):
            return self.getToken(LaTeXParser.ADD, 0)

        def SUB(self):
            return self.getToken(LaTeXParser.SUB, 0)

        def postfix(self):
            return self.getTypedRuleContext(LaTeXParser.PostfixContext, 0)

        def postfix_nofunc(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(
                    LaTeXParser.Postfix_nofuncContext
                )
            else:
                return self.getTypedRuleContext(
                    LaTeXParser.Postfix_nofuncContext, i
                )

        def getRuleIndex(self):
            return LaTeXParser.RULE_unary_nofunc

    def unary_nofunc(self):

        localctx = LaTeXParser.Unary_nofuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_unary_nofunc)
        self._la = 0  # Token type
        try:
            self.state = 159
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 7, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 150
                _la = self._input.LA(1)
                if not (_la == LaTeXParser.ADD or _la == LaTeXParser.SUB):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 151
                self.unary_nofunc()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 152
                self.postfix()
                self.state = 156
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 6, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 153
                        self.postfix_nofunc()
                    self.state = 158
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(
                        self._input, 6, self._ctx
                    )

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PostfixContext(ParserRuleContext):
        def __init__(
            self,
            parser,
            parent: ParserRuleContext = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exp(self):
            return self.getTypedRuleContext(LaTeXParser.ExpContext, 0)

        def postfix_op(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.Postfix_opContext)
            else:
                return self.getTypedRuleContext(
                    LaTeXParser.Postfix_opContext, i
                )

        def getRuleIndex(self):
            return LaTeXParser.RULE_postfix

    def postfix(self):

        localctx = LaTeXParser.PostfixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_postfix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 161
            self.exp(0)
            self.state = 165
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 8, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 162
                    self.postfix_op()
                self.state = 167
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 8, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Postfix_nofuncContext(ParserRuleContext):
        def __init__(
            self,
            parser,
            parent: ParserRuleContext = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exp_nofunc(self):
            return self.getTypedRuleContext(LaTeXParser.Exp_nofuncContext, 0)

        def postfix_op(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.Postfix_opContext)
            else:
                return self.getTypedRuleContext(
                    LaTeXParser.Postfix_opContext, i
                )

        def getRuleIndex(self):
            return LaTeXParser.RULE_postfix_nofunc

    def postfix_nofunc(self):

        localctx = LaTeXParser.Postfix_nofuncContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 20, self.RULE_postfix_nofunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 168
            self.exp_nofunc(0)
            self.state = 172
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 9, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 169
                    self.postfix_op()
                self.state = 174
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 9, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Postfix_opContext(ParserRuleContext):
        def __init__(
            self,
            parser,
            parent: ParserRuleContext = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BANG(self):
            return self.getToken(LaTeXParser.BANG, 0)

        def eval_at(self):
            return self.getTypedRuleContext(LaTeXParser.Eval_atContext, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_postfix_op

    def postfix_op(self):

        localctx = LaTeXParser.Postfix_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_postfix_op)
        try:
            self.state = 177
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LaTeXParser.BANG]:
                self.enterOuterAlt(localctx, 1)
                self.state = 175
                self.match(LaTeXParser.BANG)
                pass
            elif token in [LaTeXParser.BAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 176
                self.eval_at()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Eval_atContext(ParserRuleContext):
        def __init__(
            self,
            parser,
            parent: ParserRuleContext = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BAR(self):
            return self.getToken(LaTeXParser.BAR, 0)

        def eval_at_sup(self):
            return self.getTypedRuleContext(LaTeXParser.Eval_at_supContext, 0)

        def eval_at_sub(self):
            return self.getTypedRuleContext(LaTeXParser.Eval_at_subContext, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_eval_at

    def eval_at(self):

        localctx = LaTeXParser.Eval_atContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_eval_at)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 179
            self.match(LaTeXParser.BAR)
            self.state = 185
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 11, self._ctx)
            if la_ == 1:
                self.state = 180
                self.eval_at_sup()
                pass

            elif la_ == 2:
                self.state = 181
                self.eval_at_sub()
                pass

            elif la_ == 3:
                self.state = 182
                self.eval_at_sup()
                self.state = 183
                self.eval_at_sub()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Eval_at_subContext(ParserRuleContext):
        def __init__(
            self,
            parser,
            parent: ParserRuleContext = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(LaTeXParser.UNDERSCORE, 0)

        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext, 0)

        def equality(self):
            return self.getTypedRuleContext(LaTeXParser.EqualityContext, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_eval_at_sub

    def eval_at_sub(self):

        localctx = LaTeXParser.Eval_at_subContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_eval_at_sub)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 187
            self.match(LaTeXParser.UNDERSCORE)
            self.state = 188
            self.match(LaTeXParser.L_BRACE)
            self.state = 191
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 12, self._ctx)
            if la_ == 1:
                self.state = 189
                self.expr()
                pass

            elif la_ == 2:
                self.state = 190
                self.equality()
                pass

            self.state = 193
            self.match(LaTeXParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Eval_at_supContext(ParserRuleContext):
        def __init__(
            self,
            parser,
            parent: ParserRuleContext = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CARET(self):
            return self.getToken(LaTeXParser.CARET, 0)

        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext, 0)

        def equality(self):
            return self.getTypedRuleContext(LaTeXParser.EqualityContext, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_eval_at_sup

    def eval_at_sup(self):

        localctx = LaTeXParser.Eval_at_supContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_eval_at_sup)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 195
            self.match(LaTeXParser.CARET)
            self.state = 196
            self.match(LaTeXParser.L_BRACE)
            self.state = 199
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 13, self._ctx)
            if la_ == 1:
                self.state = 197
                self.expr()
                pass

            elif la_ == 2:
                self.state = 198
                self.equality()
                pass

            self.state = 201
            self.match(LaTeXParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpContext(ParserRuleContext):
        def __init__(
            self,
            parser,
            parent: ParserRuleContext = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp(self):
            return self.getTypedRuleContext(LaTeXParser.CompContext, 0)

        def exp(self):
            return self.getTypedRuleContext(LaTeXParser.ExpContext, 0)

        def CARET(self):
            return self.getToken(LaTeXParser.CARET, 0)

        def atom(self):
            return self.getTypedRuleContext(LaTeXParser.AtomContext, 0)

        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext, 0)

        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def subexpr(self):
            return self.getTypedRuleContext(LaTeXParser.SubexprContext, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_exp

    def exp(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LaTeXParser.ExpContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 30
        self.enterRecursionRule(localctx, 30, self.RULE_exp, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 204
            self.comp()
            self._ctx.stop = self._input.LT(-1)
            self.state = 220
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 16, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LaTeXParser.ExpContext(
                        self, _parentctx, _parentState
                    )
                    self.pushNewRecursionContext(
                        localctx, _startState, self.RULE_exp
                    )
                    self.state = 206
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import (
                            FailedPredicateException,
                        )

                        raise FailedPredicateException(
                            self, "self.precpred(self._ctx, 2)"
                        )
                    self.state = 207
                    self.match(LaTeXParser.CARET)
                    self.state = 213
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(
                        self._input, 14, self._ctx
                    )
                    if la_ == 1:
                        self.state = 208
                        self.atom()
                        pass

                    elif la_ == 2:
                        self.state = 209
                        self.match(LaTeXParser.L_BRACE)
                        self.state = 210
                        self.expr()
                        self.state = 211
                        self.match(LaTeXParser.R_BRACE)
                        pass

                    self.state = 216
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(
                        self._input, 15, self._ctx
                    )
                    if la_ == 1:
                        self.state = 215
                        self.subexpr()

                self.state = 222
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 16, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Exp_nofuncContext(ParserRuleContext):
        def __init__(
            self,
            parser,
            parent: ParserRuleContext = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp_nofunc(self):
            return self.getTypedRuleContext(LaTeXParser.Comp_nofuncContext, 0)

        def exp_nofunc(self):
            return self.getTypedRuleContext(LaTeXParser.Exp_nofuncContext, 0)

        def CARET(self):
            return self.getToken(LaTeXParser.CARET, 0)

        def atom(self):
            return self.getTypedRuleContext(LaTeXParser.AtomContext, 0)

        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext, 0)

        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def subexpr(self):
            return self.getTypedRuleContext(LaTeXParser.SubexprContext, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_exp_nofunc

    def exp_nofunc(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LaTeXParser.Exp_nofuncContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 32
        self.enterRecursionRule(localctx, 32, self.RULE_exp_nofunc, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 224
            self.comp_nofunc()
            self._ctx.stop = self._input.LT(-1)
            self.state = 240
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 19, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LaTeXParser.Exp_nofuncContext(
                        self, _parentctx, _parentState
                    )
                    self.pushNewRecursionContext(
                        localctx, _startState, self.RULE_exp_nofunc
                    )
                    self.state = 226
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import (
                            FailedPredicateException,
                        )

                        raise FailedPredicateException(
                            self, "self.precpred(self._ctx, 2)"
                        )
                    self.state = 227
                    self.match(LaTeXParser.CARET)
                    self.state = 233
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(
                        self._input, 17, self._ctx
                    )
                    if la_ == 1:
                        self.state = 228
                        self.atom()
                        pass

                    elif la_ == 2:
                        self.state = 229
                        self.match(LaTeXParser.L_BRACE)
                        self.state = 230
                        self.expr()
                        self.state = 231
                        self.match(LaTeXParser.R_BRACE)
                        pass

                    self.state = 236
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(
                        self._input, 18, self._ctx
                    )
                    if la_ == 1:
                        self.state = 235
                        self.subexpr()

                self.state = 242
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 19, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class CompContext(ParserRuleContext):
        def __init__(
            self,
            parser,
            parent: ParserRuleContext = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def group(self):
            return self.getTypedRuleContext(LaTeXParser.GroupContext, 0)

        def abs_group(self):
            return self.getTypedRuleContext(LaTeXParser.Abs_groupContext, 0)

        def func(self):
            return self.getTypedRuleContext(LaTeXParser.FuncContext, 0)

        def atom(self):
            return self.getTypedRuleContext(LaTeXParser.AtomContext, 0)

        def frac(self):
            return self.getTypedRuleContext(LaTeXParser.FracContext, 0)

        def binom(self):
            return self.getTypedRuleContext(LaTeXParser.BinomContext, 0)

        def floor(self):
            return self.getTypedRuleContext(LaTeXParser.FloorContext, 0)

        def ceil(self):
            return self.getTypedRuleContext(LaTeXParser.CeilContext, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_comp

    def comp(self):

        localctx = LaTeXParser.CompContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_comp)
        try:
            self.state = 251
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 20, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 243
                self.group()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 244
                self.abs_group()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 245
                self.func()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 246
                self.atom()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 247
                self.frac()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 248
                self.binom()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 249
                self.floor()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 250
                self.ceil()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_nofuncContext(ParserRuleContext):
        def __init__(
            self,
            parser,
            parent: ParserRuleContext = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def group(self):
            return self.getTypedRuleContext(LaTeXParser.GroupContext, 0)

        def abs_group(self):
            return self.getTypedRuleContext(LaTeXParser.Abs_groupContext, 0)

        def atom(self):
            return self.getTypedRuleContext(LaTeXParser.AtomContext, 0)

        def frac(self):
            return self.getTypedRuleContext(LaTeXParser.FracContext, 0)

        def binom(self):
            return self.getTypedRuleContext(LaTeXParser.BinomContext, 0)

        def floor(self):
            return self.getTypedRuleContext(LaTeXParser.FloorContext, 0)

        def ceil(self):
            return self.getTypedRuleContext(LaTeXParser.CeilContext, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_comp_nofunc

    def comp_nofunc(self):

        localctx = LaTeXParser.Comp_nofuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_comp_nofunc)
        try:
            self.state = 260
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 21, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 253
                self.group()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 254
                self.abs_group()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 255
                self.atom()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 256
                self.frac()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 257
                self.binom()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 258
                self.floor()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 259
                self.ceil()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GroupContext(ParserRuleContext):
        def __init__(
            self,
            parser,
            parent: ParserRuleContext = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_PAREN(self):
            return self.getToken(LaTeXParser.L_PAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext, 0)

        def R_PAREN(self):
            return self.getToken(LaTeXParser.R_PAREN, 0)

        def L_BRACKET(self):
            return self.getToken(LaTeXParser.L_BRACKET, 0)

        def R_BRACKET(self):
            return self.getToken(LaTeXParser.R_BRACKET, 0)

        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def L_BRACE_LITERAL(self):
            return self.getToken(LaTeXParser.L_BRACE_LITERAL, 0)

        def R_BRACE_LITERAL(self):
            return self.getToken(LaTeXParser.R_BRACE_LITERAL, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_group

    def group(self):

        localctx = LaTeXParser.GroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_group)
        try:
            self.state = 278
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [LaTeXParser.L_PAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 262
                self.match(LaTeXParser.L_PAREN)
                self.state = 263
                self.expr()
                self.state = 264
                self.match(LaTeXParser.R_PAREN)
                pass
            elif token in [LaTeXParser.L_BRACKET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 266
                self.match(LaTeXParser.L_BRACKET)
                self.state = 267
                self.expr()
                self.state = 268
                self.match(LaTeXParser.R_BRACKET)
                pass
            elif token in [LaTeXParser.L_BRACE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 270
                self.match(LaTeXParser.L_BRACE)
                self.state = 271
                self.expr()
                self.state = 272
                self.match(LaTeXParser.R_BRACE)
                pass
            elif token in [LaTeXParser.L_BRACE_LITERAL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 274
                self.match(LaTeXParser.L_BRACE_LITERAL)
                self.state = 275
                self.expr()
                self.state = 276
                self.match(LaTeXParser.R_BRACE_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Abs_groupContext(ParserRuleContext):
        def __init__(
            self,
            parser,
            parent: ParserRuleContext = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BAR(self, i: int = None):
            if i is None:
                return self.getTokens(LaTeXParser.BAR)
            else:
                return self.getToken(LaTeXParser.BAR, i)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_abs_group

    def abs_group(self):

        localctx = LaTeXParser.Abs_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_abs_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 280
            self.match(LaTeXParser.BAR)
            self.state = 281
            self.expr()
            self.state = 282
            self.match(LaTeXParser.BAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Symbol_customContext(ParserRuleContext):
        def __init__(
            self,
            parser,
            parent: ParserRuleContext = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYMBOL(self):
            return self.getToken(LaTeXParser.SYMBOL, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_symbol_custom

    def symbol_custom(self):

        localctx = LaTeXParser.Symbol_customContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 42, self.RULE_symbol_custom)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 284
            if (
                not self._input.LT(1).text[1:]
                in self.CUSTOM_MATH.get("symbols", {}).keys()
            ):
                from antlr4.error.Errors import FailedPredicateException

                raise FailedPredicateException(
                    self,
                    ' self._input.LT(1).text[1:] in self.CUSTOM_MATH.get("symbols", {}).keys() ',
                )
            self.state = 285
            self.match(LaTeXParser.SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomContext(ParserRuleContext):
        def __init__(
            self,
            parser,
            parent: ParserRuleContext = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def symbol_custom(self):
            return self.getTypedRuleContext(
                LaTeXParser.Symbol_customContext, 0
            )

        def LETTER(self):
            return self.getToken(LaTeXParser.LETTER, 0)

        def SYMBOL(self):
            return self.getToken(LaTeXParser.SYMBOL, 0)

        def subexpr(self):
            return self.getTypedRuleContext(LaTeXParser.SubexprContext, 0)

        def NUMBER(self):
            return self.getToken(LaTeXParser.NUMBER, 0)

        def DIFFERENTIAL(self):
            return self.getToken(LaTeXParser.DIFFERENTIAL, 0)

        def mathit(self):
            return self.getTypedRuleContext(LaTeXParser.MathitContext, 0)

        def bra(self):
            return self.getTypedRuleContext(LaTeXParser.BraContext, 0)

        def ket(self):
            return self.getTypedRuleContext(LaTeXParser.KetContext, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_atom

    def atom(self):

        localctx = LaTeXParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_atom)
        self._la = 0  # Token type
        try:
            self.state = 297
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 24, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 287
                self.symbol_custom()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 288
                _la = self._input.LA(1)
                if not (
                    _la == LaTeXParser.LETTER or _la == LaTeXParser.SYMBOL
                ):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 290
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 23, self._ctx)
                if la_ == 1:
                    self.state = 289
                    self.subexpr()

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 292
                self.match(LaTeXParser.NUMBER)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 293
                self.match(LaTeXParser.DIFFERENTIAL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 294
                self.mathit()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 295
                self.bra()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 296
                self.ket()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BraContext(ParserRuleContext):
        def __init__(
            self,
            parser,
            parent: ParserRuleContext = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_ANGLE(self):
            return self.getToken(LaTeXParser.L_ANGLE, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext, 0)

        def R_BAR(self):
            return self.getToken(LaTeXParser.R_BAR, 0)

        def BAR(self):
            return self.getToken(LaTeXParser.BAR, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_bra

    def bra(self):

        localctx = LaTeXParser.BraContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_bra)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 299
            self.match(LaTeXParser.L_ANGLE)
            self.state = 300
            self.expr()
            self.state = 301
            _la = self._input.LA(1)
            if not (_la == LaTeXParser.BAR or _la == LaTeXParser.R_BAR):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KetContext(ParserRuleContext):
        def __init__(
            self,
            parser,
            parent: ParserRuleContext = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext, 0)

        def R_ANGLE(self):
            return self.getToken(LaTeXParser.R_ANGLE, 0)

        def L_BAR(self):
            return self.getToken(LaTeXParser.L_BAR, 0)

        def BAR(self):
            return self.getToken(LaTeXParser.BAR, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_ket

    def ket(self):

        localctx = LaTeXParser.KetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_ket)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 303
            _la = self._input.LA(1)
            if not (_la == LaTeXParser.BAR or _la == LaTeXParser.L_BAR):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 304
            self.expr()
            self.state = 305
            self.match(LaTeXParser.R_ANGLE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MathitContext(ParserRuleContext):
        def __init__(
            self,
            parser,
            parent: ParserRuleContext = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_MATHIT(self):
            return self.getToken(LaTeXParser.CMD_MATHIT, 0)

        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def mathit_text(self):
            return self.getTypedRuleContext(LaTeXParser.Mathit_textContext, 0)

        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_mathit

    def mathit(self):

        localctx = LaTeXParser.MathitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_mathit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 307
            self.match(LaTeXParser.CMD_MATHIT)
            self.state = 308
            self.match(LaTeXParser.L_BRACE)
            self.state = 309
            self.mathit_text()
            self.state = 310
            self.match(LaTeXParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Mathit_textContext(ParserRuleContext):
        def __init__(
            self,
            parser,
            parent: ParserRuleContext = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LETTER(self, i: int = None):
            if i is None:
                return self.getTokens(LaTeXParser.LETTER)
            else:
                return self.getToken(LaTeXParser.LETTER, i)

        def getRuleIndex(self):
            return LaTeXParser.RULE_mathit_text

    def mathit_text(self):

        localctx = LaTeXParser.Mathit_textContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_mathit_text)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 315
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == LaTeXParser.LETTER:
                self.state = 312
                self.match(LaTeXParser.LETTER)
                self.state = 317
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FracContext(ParserRuleContext):
        def __init__(
            self,
            parser,
            parent: ParserRuleContext = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.upper = None  # ExprContext
            self.lower = None  # ExprContext

        def CMD_FRAC(self):
            return self.getToken(LaTeXParser.CMD_FRAC, 0)

        def L_BRACE(self, i: int = None):
            if i is None:
                return self.getTokens(LaTeXParser.L_BRACE)
            else:
                return self.getToken(LaTeXParser.L_BRACE, i)

        def R_BRACE(self, i: int = None):
            if i is None:
                return self.getTokens(LaTeXParser.R_BRACE)
            else:
                return self.getToken(LaTeXParser.R_BRACE, i)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.ExprContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.ExprContext, i)

        def getRuleIndex(self):
            return LaTeXParser.RULE_frac

    def frac(self):

        localctx = LaTeXParser.FracContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_frac)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 318
            self.match(LaTeXParser.CMD_FRAC)
            self.state = 319
            self.match(LaTeXParser.L_BRACE)
            self.state = 320
            localctx.upper = self.expr()
            self.state = 321
            self.match(LaTeXParser.R_BRACE)
            self.state = 322
            self.match(LaTeXParser.L_BRACE)
            self.state = 323
            localctx.lower = self.expr()
            self.state = 324
            self.match(LaTeXParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BinomContext(ParserRuleContext):
        def __init__(
            self,
            parser,
            parent: ParserRuleContext = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.n = None  # ExprContext
            self.k = None  # ExprContext

        def L_BRACE(self, i: int = None):
            if i is None:
                return self.getTokens(LaTeXParser.L_BRACE)
            else:
                return self.getToken(LaTeXParser.L_BRACE, i)

        def R_BRACE(self, i: int = None):
            if i is None:
                return self.getTokens(LaTeXParser.R_BRACE)
            else:
                return self.getToken(LaTeXParser.R_BRACE, i)

        def CMD_BINOM(self):
            return self.getToken(LaTeXParser.CMD_BINOM, 0)

        def CMD_DBINOM(self):
            return self.getToken(LaTeXParser.CMD_DBINOM, 0)

        def CMD_TBINOM(self):
            return self.getToken(LaTeXParser.CMD_TBINOM, 0)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.ExprContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.ExprContext, i)

        def getRuleIndex(self):
            return LaTeXParser.RULE_binom

    def binom(self):

        localctx = LaTeXParser.BinomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_binom)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 326
            _la = self._input.LA(1)
            if not (
                (
                    (((_la - 68)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 68))
                        & (
                            (1 << (LaTeXParser.CMD_BINOM - 68))
                            | (1 << (LaTeXParser.CMD_DBINOM - 68))
                            | (1 << (LaTeXParser.CMD_TBINOM - 68))
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 327
            self.match(LaTeXParser.L_BRACE)
            self.state = 328
            localctx.n = self.expr()
            self.state = 329
            self.match(LaTeXParser.R_BRACE)
            self.state = 330
            self.match(LaTeXParser.L_BRACE)
            self.state = 331
            localctx.k = self.expr()
            self.state = 332
            self.match(LaTeXParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FloorContext(ParserRuleContext):
        def __init__(
            self,
            parser,
            parent: ParserRuleContext = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.val = None  # ExprContext

        def L_FLOOR(self):
            return self.getToken(LaTeXParser.L_FLOOR, 0)

        def R_FLOOR(self):
            return self.getToken(LaTeXParser.R_FLOOR, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_floor

    def floor(self):

        localctx = LaTeXParser.FloorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_floor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 334
            self.match(LaTeXParser.L_FLOOR)
            self.state = 335
            localctx.val = self.expr()
            self.state = 336
            self.match(LaTeXParser.R_FLOOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CeilContext(ParserRuleContext):
        def __init__(
            self,
            parser,
            parent: ParserRuleContext = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.val = None  # ExprContext

        def L_CEIL(self):
            return self.getToken(LaTeXParser.L_CEIL, 0)

        def R_CEIL(self):
            return self.getToken(LaTeXParser.R_CEIL, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_ceil

    def ceil(self):

        localctx = LaTeXParser.CeilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_ceil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 338
            self.match(LaTeXParser.L_CEIL)
            self.state = 339
            localctx.val = self.expr()
            self.state = 340
            self.match(LaTeXParser.R_CEIL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_normalContext(ParserRuleContext):
        def __init__(
            self,
            parser,
            parent: ParserRuleContext = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC_EXP(self):
            return self.getToken(LaTeXParser.FUNC_EXP, 0)

        def FUNC_LOG(self):
            return self.getToken(LaTeXParser.FUNC_LOG, 0)

        def FUNC_LN(self):
            return self.getToken(LaTeXParser.FUNC_LN, 0)

        def FUNC_SIN(self):
            return self.getToken(LaTeXParser.FUNC_SIN, 0)

        def FUNC_COS(self):
            return self.getToken(LaTeXParser.FUNC_COS, 0)

        def FUNC_TAN(self):
            return self.getToken(LaTeXParser.FUNC_TAN, 0)

        def FUNC_CSC(self):
            return self.getToken(LaTeXParser.FUNC_CSC, 0)

        def FUNC_SEC(self):
            return self.getToken(LaTeXParser.FUNC_SEC, 0)

        def FUNC_COT(self):
            return self.getToken(LaTeXParser.FUNC_COT, 0)

        def FUNC_ARCSIN(self):
            return self.getToken(LaTeXParser.FUNC_ARCSIN, 0)

        def FUNC_ARCCOS(self):
            return self.getToken(LaTeXParser.FUNC_ARCCOS, 0)

        def FUNC_ARCTAN(self):
            return self.getToken(LaTeXParser.FUNC_ARCTAN, 0)

        def FUNC_ARCCSC(self):
            return self.getToken(LaTeXParser.FUNC_ARCCSC, 0)

        def FUNC_ARCSEC(self):
            return self.getToken(LaTeXParser.FUNC_ARCSEC, 0)

        def FUNC_ARCCOT(self):
            return self.getToken(LaTeXParser.FUNC_ARCCOT, 0)

        def FUNC_SINH(self):
            return self.getToken(LaTeXParser.FUNC_SINH, 0)

        def FUNC_COSH(self):
            return self.getToken(LaTeXParser.FUNC_COSH, 0)

        def FUNC_TANH(self):
            return self.getToken(LaTeXParser.FUNC_TANH, 0)

        def FUNC_ARSINH(self):
            return self.getToken(LaTeXParser.FUNC_ARSINH, 0)

        def FUNC_ARCOSH(self):
            return self.getToken(LaTeXParser.FUNC_ARCOSH, 0)

        def FUNC_ARTANH(self):
            return self.getToken(LaTeXParser.FUNC_ARTANH, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_func_normal

    def func_normal(self):

        localctx = LaTeXParser.Func_normalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_func_normal)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 342
            _la = self._input.LA(1)
            if not (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << LaTeXParser.FUNC_EXP)
                            | (1 << LaTeXParser.FUNC_LOG)
                            | (1 << LaTeXParser.FUNC_LN)
                            | (1 << LaTeXParser.FUNC_SIN)
                            | (1 << LaTeXParser.FUNC_COS)
                            | (1 << LaTeXParser.FUNC_TAN)
                            | (1 << LaTeXParser.FUNC_CSC)
                            | (1 << LaTeXParser.FUNC_SEC)
                            | (1 << LaTeXParser.FUNC_COT)
                            | (1 << LaTeXParser.FUNC_ARCSIN)
                            | (1 << LaTeXParser.FUNC_ARCCOS)
                            | (1 << LaTeXParser.FUNC_ARCTAN)
                            | (1 << LaTeXParser.FUNC_ARCCSC)
                            | (1 << LaTeXParser.FUNC_ARCSEC)
                            | (1 << LaTeXParser.FUNC_ARCCOT)
                            | (1 << LaTeXParser.FUNC_SINH)
                            | (1 << LaTeXParser.FUNC_COSH)
                            | (1 << LaTeXParser.FUNC_TANH)
                            | (1 << LaTeXParser.FUNC_ARSINH)
                            | (1 << LaTeXParser.FUNC_ARCOSH)
                            | (1 << LaTeXParser.FUNC_ARTANH)
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_customContext(ParserRuleContext):
        def __init__(
            self,
            parser,
            parent: ParserRuleContext = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYMBOL(self):
            return self.getToken(LaTeXParser.SYMBOL, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_func_custom

    def func_custom(self):

        localctx = LaTeXParser.Func_customContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_func_custom)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 344
            if (
                not self._input.LT(1).text[1:]
                in self.CUSTOM_MATH.get("functions", {}).keys()
            ):
                from antlr4.error.Errors import FailedPredicateException

                raise FailedPredicateException(
                    self,
                    ' self._input.LT(1).text[1:] in self.CUSTOM_MATH.get("functions", {}).keys() ',
                )
            self.state = 345
            self.match(LaTeXParser.SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SeparatorContext(ParserRuleContext):
        def __init__(
            self,
            parser,
            parent: ParserRuleContext = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BAR(self):
            return self.getToken(LaTeXParser.BAR, 0)

        def COMMA(self):
            return self.getToken(LaTeXParser.COMMA, 0)

        def SEMICOLON(self):
            return self.getToken(LaTeXParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_separator

    def separator(self):

        localctx = LaTeXParser.SeparatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_separator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 347
            _la = self._input.LA(1)
            if not (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << LaTeXParser.BAR)
                            | (1 << LaTeXParser.COMMA)
                            | (1 << LaTeXParser.SEMICOLON)
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FuncContext(ParserRuleContext):
        def __init__(
            self,
            parser,
            parent: ParserRuleContext = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arg0 = None  # ExprContext
            self.sep0 = None  # SeparatorContext
            self.arg1 = None  # ExprContext
            self.sep1 = None  # SeparatorContext
            self.arg2 = None  # ExprContext
            self.sep2 = None  # SeparatorContext
            self.arg3 = None  # ExprContext
            self.sep3 = None  # SeparatorContext
            self.arg4 = None  # ExprContext
            self.sep4 = None  # SeparatorContext
            self.arg5 = None  # ExprContext
            self.sep5 = None  # SeparatorContext
            self.arg6 = None  # ExprContext
            self.sep6 = None  # SeparatorContext
            self.arg7 = None  # ExprContext
            self.sep7 = None  # SeparatorContext
            self.arg8 = None  # ExprContext
            self.sep8 = None  # SeparatorContext
            self.arg9 = None  # ExprContext
            self.root = None  # ExprContext
            self.base = None  # ExprContext

        def func_custom(self):
            return self.getTypedRuleContext(LaTeXParser.Func_customContext, 0)

        def L_PAREN(self):
            return self.getToken(LaTeXParser.L_PAREN, 0)

        def R_PAREN(self):
            return self.getToken(LaTeXParser.R_PAREN, 0)

        def expr(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.ExprContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.ExprContext, i)

        def separator(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.SeparatorContext)
            else:
                return self.getTypedRuleContext(
                    LaTeXParser.SeparatorContext, i
                )

        def func_normal(self):
            return self.getTypedRuleContext(LaTeXParser.Func_normalContext, 0)

        def func_arg(self):
            return self.getTypedRuleContext(LaTeXParser.Func_argContext, 0)

        def func_arg_noparens(self):
            return self.getTypedRuleContext(
                LaTeXParser.Func_arg_noparensContext, 0
            )

        def subexpr(self):
            return self.getTypedRuleContext(LaTeXParser.SubexprContext, 0)

        def supexpr(self):
            return self.getTypedRuleContext(LaTeXParser.SupexprContext, 0)

        def args(self):
            return self.getTypedRuleContext(LaTeXParser.ArgsContext, 0)

        def LETTER(self):
            return self.getToken(LaTeXParser.LETTER, 0)

        def SYMBOL(self):
            return self.getToken(LaTeXParser.SYMBOL, 0)

        def FUNC_INT(self):
            return self.getToken(LaTeXParser.FUNC_INT, 0)

        def DIFFERENTIAL(self):
            return self.getToken(LaTeXParser.DIFFERENTIAL, 0)

        def frac(self):
            return self.getTypedRuleContext(LaTeXParser.FracContext, 0)

        def additive(self):
            return self.getTypedRuleContext(LaTeXParser.AdditiveContext, 0)

        def FUNC_SQRT(self):
            return self.getToken(LaTeXParser.FUNC_SQRT, 0)

        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def L_BRACKET(self):
            return self.getToken(LaTeXParser.L_BRACKET, 0)

        def R_BRACKET(self):
            return self.getToken(LaTeXParser.R_BRACKET, 0)

        def FUNC_OVERLINE(self):
            return self.getToken(LaTeXParser.FUNC_OVERLINE, 0)

        def mp(self):
            return self.getTypedRuleContext(LaTeXParser.MpContext, 0)

        def FUNC_SUM(self):
            return self.getToken(LaTeXParser.FUNC_SUM, 0)

        def FUNC_PROD(self):
            return self.getToken(LaTeXParser.FUNC_PROD, 0)

        def subeq(self):
            return self.getTypedRuleContext(LaTeXParser.SubeqContext, 0)

        def FUNC_LIM(self):
            return self.getToken(LaTeXParser.FUNC_LIM, 0)

        def limit_sub(self):
            return self.getTypedRuleContext(LaTeXParser.Limit_subContext, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_func

    def func(self):

        localctx = LaTeXParser.FuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_func)
        self._la = 0  # Token type
        try:
            self.state = 469
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 47, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 349
                self.func_custom()

                self.state = 350
                self.match(LaTeXParser.L_PAREN)
                self.state = 351
                localctx.arg0 = self.expr()
                self.state = 387
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3F) == 0 and (
                    (1 << _la)
                    & (
                        (1 << LaTeXParser.BAR)
                        | (1 << LaTeXParser.COMMA)
                        | (1 << LaTeXParser.SEMICOLON)
                    )
                ) != 0:
                    self.state = 352
                    localctx.sep0 = self.separator()
                    self.state = 353
                    localctx.arg1 = self.expr()
                    self.state = 385
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((_la) & ~0x3F) == 0 and (
                        (1 << _la)
                        & (
                            (1 << LaTeXParser.BAR)
                            | (1 << LaTeXParser.COMMA)
                            | (1 << LaTeXParser.SEMICOLON)
                        )
                    ) != 0:
                        self.state = 354
                        localctx.sep1 = self.separator()
                        self.state = 355
                        localctx.arg2 = self.expr()
                        self.state = 383
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((_la) & ~0x3F) == 0 and (
                            (1 << _la)
                            & (
                                (1 << LaTeXParser.BAR)
                                | (1 << LaTeXParser.COMMA)
                                | (1 << LaTeXParser.SEMICOLON)
                            )
                        ) != 0:
                            self.state = 356
                            localctx.sep2 = self.separator()
                            self.state = 357
                            localctx.arg3 = self.expr()
                            self.state = 381
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if ((_la) & ~0x3F) == 0 and (
                                (1 << _la)
                                & (
                                    (1 << LaTeXParser.BAR)
                                    | (1 << LaTeXParser.COMMA)
                                    | (1 << LaTeXParser.SEMICOLON)
                                )
                            ) != 0:
                                self.state = 358
                                localctx.sep3 = self.separator()
                                self.state = 359
                                localctx.arg4 = self.expr()
                                self.state = 379
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if ((_la) & ~0x3F) == 0 and (
                                    (1 << _la)
                                    & (
                                        (1 << LaTeXParser.BAR)
                                        | (1 << LaTeXParser.COMMA)
                                        | (1 << LaTeXParser.SEMICOLON)
                                    )
                                ) != 0:
                                    self.state = 360
                                    localctx.sep4 = self.separator()
                                    self.state = 361
                                    localctx.arg5 = self.expr()
                                    self.state = 377
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if ((_la) & ~0x3F) == 0 and (
                                        (1 << _la)
                                        & (
                                            (1 << LaTeXParser.BAR)
                                            | (1 << LaTeXParser.COMMA)
                                            | (1 << LaTeXParser.SEMICOLON)
                                        )
                                    ) != 0:
                                        self.state = 362
                                        localctx.sep5 = self.separator()
                                        self.state = 363
                                        localctx.arg6 = self.expr()
                                        self.state = 375
                                        self._errHandler.sync(self)
                                        _la = self._input.LA(1)
                                        if ((_la) & ~0x3F) == 0 and (
                                            (1 << _la)
                                            & (
                                                (1 << LaTeXParser.BAR)
                                                | (1 << LaTeXParser.COMMA)
                                                | (1 << LaTeXParser.SEMICOLON)
                                            )
                                        ) != 0:
                                            self.state = 364
                                            localctx.sep6 = self.separator()
                                            self.state = 365
                                            localctx.arg7 = self.expr()
                                            self.state = 373
                                            self._errHandler.sync(self)
                                            _la = self._input.LA(1)
                                            if ((_la) & ~0x3F) == 0 and (
                                                (1 << _la)
                                                & (
                                                    (1 << LaTeXParser.BAR)
                                                    | (1 << LaTeXParser.COMMA)
                                                    | (
                                                        1
                                                        << LaTeXParser.SEMICOLON
                                                    )
                                                )
                                            ) != 0:
                                                self.state = 366
                                                localctx.sep7 = (
                                                    self.separator()
                                                )
                                                self.state = 367
                                                localctx.arg8 = self.expr()
                                                self.state = 371
                                                self._errHandler.sync(self)
                                                _la = self._input.LA(1)
                                                if ((_la) & ~0x3F) == 0 and (
                                                    (1 << _la)
                                                    & (
                                                        (1 << LaTeXParser.BAR)
                                                        | (
                                                            1
                                                            << LaTeXParser.COMMA
                                                        )
                                                        | (
                                                            1
                                                            << LaTeXParser.SEMICOLON
                                                        )
                                                    )
                                                ) != 0:
                                                    self.state = 368
                                                    localctx.sep8 = (
                                                        self.separator()
                                                    )
                                                    self.state = 369
                                                    localctx.arg9 = self.expr()

                self.state = 389
                self.match(LaTeXParser.R_PAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 391
                self.func_normal()
                self.state = 404
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 39, self._ctx)
                if la_ == 1:
                    self.state = 393
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(
                        self._input, 35, self._ctx
                    )
                    if la_ == 1:
                        self.state = 392
                        self.subexpr()

                    self.state = 396
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(
                        self._input, 36, self._ctx
                    )
                    if la_ == 1:
                        self.state = 395
                        self.supexpr()

                    pass

                elif la_ == 2:
                    self.state = 399
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(
                        self._input, 37, self._ctx
                    )
                    if la_ == 1:
                        self.state = 398
                        self.supexpr()

                    self.state = 402
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(
                        self._input, 38, self._ctx
                    )
                    if la_ == 1:
                        self.state = 401
                        self.subexpr()

                    pass

                self.state = 411
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 40, self._ctx)
                if la_ == 1:
                    self.state = 406
                    self.match(LaTeXParser.L_PAREN)
                    self.state = 407
                    self.func_arg()
                    self.state = 408
                    self.match(LaTeXParser.R_PAREN)
                    pass

                elif la_ == 2:
                    self.state = 410
                    self.func_arg_noparens()
                    pass

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 413
                _la = self._input.LA(1)
                if not (
                    _la == LaTeXParser.LETTER or _la == LaTeXParser.SYMBOL
                ):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 415
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == LaTeXParser.UNDERSCORE:
                    self.state = 414
                    self.subexpr()

                self.state = 417
                self.match(LaTeXParser.L_PAREN)
                self.state = 418
                self.args()
                self.state = 419
                self.match(LaTeXParser.R_PAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 421
                self.match(LaTeXParser.FUNC_INT)
                self.state = 428
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 42, self._ctx)
                if la_ == 1:
                    self.state = 422
                    self.subexpr()
                    self.state = 423
                    self.supexpr()

                elif la_ == 2:
                    self.state = 425
                    self.supexpr()
                    self.state = 426
                    self.subexpr()

                self.state = 436
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 44, self._ctx)
                if la_ == 1:
                    self.state = 431
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(
                        self._input, 43, self._ctx
                    )
                    if la_ == 1:
                        self.state = 430
                        self.additive(0)

                    self.state = 433
                    self.match(LaTeXParser.DIFFERENTIAL)
                    pass

                elif la_ == 2:
                    self.state = 434
                    self.frac()
                    pass

                elif la_ == 3:
                    self.state = 435
                    self.additive(0)
                    pass

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 438
                self.match(LaTeXParser.FUNC_SQRT)
                self.state = 443
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == LaTeXParser.L_BRACKET:
                    self.state = 439
                    self.match(LaTeXParser.L_BRACKET)
                    self.state = 440
                    localctx.root = self.expr()
                    self.state = 441
                    self.match(LaTeXParser.R_BRACKET)

                self.state = 445
                self.match(LaTeXParser.L_BRACE)
                self.state = 446
                localctx.base = self.expr()
                self.state = 447
                self.match(LaTeXParser.R_BRACE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 449
                self.match(LaTeXParser.FUNC_OVERLINE)
                self.state = 450
                self.match(LaTeXParser.L_BRACE)
                self.state = 451
                localctx.base = self.expr()
                self.state = 452
                self.match(LaTeXParser.R_BRACE)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 454
                _la = self._input.LA(1)
                if not (
                    _la == LaTeXParser.FUNC_SUM or _la == LaTeXParser.FUNC_PROD
                ):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 461
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [LaTeXParser.UNDERSCORE]:
                    self.state = 455
                    self.subeq()
                    self.state = 456
                    self.supexpr()
                    pass
                elif token in [LaTeXParser.CARET]:
                    self.state = 458
                    self.supexpr()
                    self.state = 459
                    self.subeq()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 463
                self.mp(0)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 465
                self.match(LaTeXParser.FUNC_LIM)
                self.state = 466
                self.limit_sub()
                self.state = 467
                self.mp(0)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgsContext(ParserRuleContext):
        def __init__(
            self,
            parser,
            parent: ParserRuleContext = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext, 0)

        def COMMA(self):
            return self.getToken(LaTeXParser.COMMA, 0)

        def args(self):
            return self.getTypedRuleContext(LaTeXParser.ArgsContext, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_args

    def args(self):

        localctx = LaTeXParser.ArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_args)
        try:
            self.state = 476
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 48, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 471
                self.expr()
                self.state = 472
                self.match(LaTeXParser.COMMA)
                self.state = 473
                self.args()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 475
                self.expr()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Limit_subContext(ParserRuleContext):
        def __init__(
            self,
            parser,
            parent: ParserRuleContext = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(LaTeXParser.UNDERSCORE, 0)

        def L_BRACE(self, i: int = None):
            if i is None:
                return self.getTokens(LaTeXParser.L_BRACE)
            else:
                return self.getToken(LaTeXParser.L_BRACE, i)

        def LIM_APPROACH_SYM(self):
            return self.getToken(LaTeXParser.LIM_APPROACH_SYM, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext, 0)

        def R_BRACE(self, i: int = None):
            if i is None:
                return self.getTokens(LaTeXParser.R_BRACE)
            else:
                return self.getToken(LaTeXParser.R_BRACE, i)

        def LETTER(self):
            return self.getToken(LaTeXParser.LETTER, 0)

        def SYMBOL(self):
            return self.getToken(LaTeXParser.SYMBOL, 0)

        def CARET(self):
            return self.getToken(LaTeXParser.CARET, 0)

        def ADD(self):
            return self.getToken(LaTeXParser.ADD, 0)

        def SUB(self):
            return self.getToken(LaTeXParser.SUB, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_limit_sub

    def limit_sub(self):

        localctx = LaTeXParser.Limit_subContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_limit_sub)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 478
            self.match(LaTeXParser.UNDERSCORE)
            self.state = 479
            self.match(LaTeXParser.L_BRACE)
            self.state = 480
            _la = self._input.LA(1)
            if not (_la == LaTeXParser.LETTER or _la == LaTeXParser.SYMBOL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 481
            self.match(LaTeXParser.LIM_APPROACH_SYM)
            self.state = 482
            self.expr()
            self.state = 487
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == LaTeXParser.CARET:
                self.state = 483
                self.match(LaTeXParser.CARET)
                self.state = 484
                self.match(LaTeXParser.L_BRACE)
                self.state = 485
                _la = self._input.LA(1)
                if not (_la == LaTeXParser.ADD or _la == LaTeXParser.SUB):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 486
                self.match(LaTeXParser.R_BRACE)

            self.state = 489
            self.match(LaTeXParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_argContext(ParserRuleContext):
        def __init__(
            self,
            parser,
            parent: ParserRuleContext = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext, 0)

        def COMMA(self):
            return self.getToken(LaTeXParser.COMMA, 0)

        def func_arg(self):
            return self.getTypedRuleContext(LaTeXParser.Func_argContext, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_func_arg

    def func_arg(self):

        localctx = LaTeXParser.Func_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_func_arg)
        try:
            self.state = 496
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 50, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 491
                self.expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 492
                self.expr()
                self.state = 493
                self.match(LaTeXParser.COMMA)
                self.state = 494
                self.func_arg()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_arg_noparensContext(ParserRuleContext):
        def __init__(
            self,
            parser,
            parent: ParserRuleContext = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mp_nofunc(self):
            return self.getTypedRuleContext(LaTeXParser.Mp_nofuncContext, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_func_arg_noparens

    def func_arg_noparens(self):

        localctx = LaTeXParser.Func_arg_noparensContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 76, self.RULE_func_arg_noparens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 498
            self.mp_nofunc(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubexprContext(ParserRuleContext):
        def __init__(
            self,
            parser,
            parent: ParserRuleContext = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(LaTeXParser.UNDERSCORE, 0)

        def atom(self):
            return self.getTypedRuleContext(LaTeXParser.AtomContext, 0)

        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext, 0)

        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_subexpr

    def subexpr(self):

        localctx = LaTeXParser.SubexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_subexpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 500
            self.match(LaTeXParser.UNDERSCORE)
            self.state = 506
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 51, self._ctx)
            if la_ == 1:
                self.state = 501
                self.atom()
                pass

            elif la_ == 2:
                self.state = 502
                self.match(LaTeXParser.L_BRACE)
                self.state = 503
                self.expr()
                self.state = 504
                self.match(LaTeXParser.R_BRACE)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SupexprContext(ParserRuleContext):
        def __init__(
            self,
            parser,
            parent: ParserRuleContext = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CARET(self):
            return self.getToken(LaTeXParser.CARET, 0)

        def atom(self):
            return self.getTypedRuleContext(LaTeXParser.AtomContext, 0)

        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext, 0)

        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_supexpr

    def supexpr(self):

        localctx = LaTeXParser.SupexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_supexpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 508
            self.match(LaTeXParser.CARET)
            self.state = 514
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 52, self._ctx)
            if la_ == 1:
                self.state = 509
                self.atom()
                pass

            elif la_ == 2:
                self.state = 510
                self.match(LaTeXParser.L_BRACE)
                self.state = 511
                self.expr()
                self.state = 512
                self.match(LaTeXParser.R_BRACE)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubeqContext(ParserRuleContext):
        def __init__(
            self,
            parser,
            parent: ParserRuleContext = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(LaTeXParser.UNDERSCORE, 0)

        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def equality(self):
            return self.getTypedRuleContext(LaTeXParser.EqualityContext, 0)

        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_subeq

    def subeq(self):

        localctx = LaTeXParser.SubeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_subeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 516
            self.match(LaTeXParser.UNDERSCORE)
            self.state = 517
            self.match(LaTeXParser.L_BRACE)
            self.state = 518
            self.equality()
            self.state = 519
            self.match(LaTeXParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SupeqContext(ParserRuleContext):
        def __init__(
            self,
            parser,
            parent: ParserRuleContext = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(LaTeXParser.UNDERSCORE, 0)

        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def equality(self):
            return self.getTypedRuleContext(LaTeXParser.EqualityContext, 0)

        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_supeq

    def supeq(self):

        localctx = LaTeXParser.SupeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_supeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 521
            self.match(LaTeXParser.UNDERSCORE)
            self.state = 522
            self.match(LaTeXParser.L_BRACE)
            self.state = 523
            self.equality()
            self.state = 524
            self.match(LaTeXParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnknownContext(ParserRuleContext):
        def __init__(
            self,
            parser,
            parent: ParserRuleContext = None,
            invokingState: int = -1,
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return LaTeXParser.RULE_unknown

    def unknown(self):

        localctx = LaTeXParser.UnknownContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_unknown)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 529
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 53, self._ctx)
            while _alt != 1 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1 + 1:
                    self.state = 526
                    self.matchWildcard()
                self.state = 531
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 53, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    def sempred(self, localctx: RuleContext, ruleIndex: int, predIndex: int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[1] = self.relation_sempred
        self._predicates[4] = self.additive_sempred
        self._predicates[5] = self.mp_sempred
        self._predicates[6] = self.mp_nofunc_sempred
        self._predicates[15] = self.exp_sempred
        self._predicates[16] = self.exp_nofunc_sempred
        self._predicates[21] = self.symbol_custom_sempred
        self._predicates[32] = self.func_custom_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def relation_sempred(self, localctx: RelationContext, predIndex: int):
        if predIndex == 0:
            return self.precpred(self._ctx, 2)

    def additive_sempred(self, localctx: AdditiveContext, predIndex: int):
        if predIndex == 1:
            return self.precpred(self._ctx, 2)

    def mp_sempred(self, localctx: MpContext, predIndex: int):
        if predIndex == 2:
            return self.precpred(self._ctx, 2)

    def mp_nofunc_sempred(self, localctx: Mp_nofuncContext, predIndex: int):
        if predIndex == 3:
            return self.precpred(self._ctx, 2)

    def exp_sempred(self, localctx: ExpContext, predIndex: int):
        if predIndex == 4:
            return self.precpred(self._ctx, 2)

    def exp_nofunc_sempred(self, localctx: Exp_nofuncContext, predIndex: int):
        if predIndex == 5:
            return self.precpred(self._ctx, 2)

    def symbol_custom_sempred(
        self, localctx: Symbol_customContext, predIndex: int
    ):
        if predIndex == 6:
            return (
                self._input.LT(1).text[1:]
                in self.CUSTOM_MATH.get("symbols", {}).keys()
            )

    def func_custom_sempred(
        self, localctx: Func_customContext, predIndex: int
    ):
        if predIndex == 7:
            return (
                self._input.LT(1).text[1:]
                in self.CUSTOM_MATH.get("functions", {}).keys()
            )
